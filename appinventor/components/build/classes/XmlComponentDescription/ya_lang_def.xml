<!DOCTYPE BlockLangDef SYSTEM "ignore_lang_def.dtd">
<!--
    This describes BlockGenus, BlockDrawer, BlockFamilies in Young Android.
    Based on third_party/java/openblocks/slcodeblocks/v20090424/support/lang_def.xml
  -->

<!-- Note: WARNING:  When you create a block, don't name
   one of the  connectors "value" and then use it in a block type
   rule, for example 
        LangSpecProperty key="socket-allow-1" value="value/boolean"
   This will crash the  blocks editor with a "bad block" error.
   We need to track this bug down and fix it, probably in BlockRules -->

<BlockLangDef ya-version="90" lang-version="17">
  <BlockConnectorShapes>
    <BlockConnectorShape shape-type="number" shape-number="1"/>
    <BlockConnectorShape shape-type="number-list" shape-number="2"/>
    <BlockConnectorShape shape-type="number-inv" shape-number="3"/>
    <BlockConnectorShape shape-type="boolean" shape-number="4"/>
    <BlockConnectorShape shape-type="boolean-list" shape-number="5"/>
    <BlockConnectorShape shape-type="boolean-inv" shape-number="6"/>
    <BlockConnectorShape shape-type="string" shape-number="7"/>
    <BlockConnectorShape shape-type="string-list" shape-number="8"/>
    <BlockConnectorShape shape-type="string-inv" shape-number="9"/>
    <BlockConnectorShape shape-type="poly" shape-number="10"/>
    <BlockConnectorShape shape-type="poly-list" shape-number="11"/>
    <BlockConnectorShape shape-type="poly-inv" shape-number="12"/>
    <BlockConnectorShape shape-type="proc-param" shape-number="13"/>
    <BlockConnectorShape shape-type="cmd" shape-number="14"/>
    <BlockConnectorShape shape-type="infix-rhs" shape-number="15"/>
  </BlockConnectorShapes>

  <BlockColors>
    <BlockColor name="setter" rgb-value="162 205 250"/>
    <BlockColor name="text" rgb-value="248 208 143"/>
    <BlockColor name="list" rgb-value="255 251 211"/>
    <BlockColor name="math" rgb-value="216 237 145"/>
    <BlockColor name="event" rgb-value="191 217 108"/>
    <BlockColor name="logic" rgb-value="255 174 128"/>
    <BlockColor name="control" rgb-value="252 233 157"/>
    <BlockColor name="colors" rgb-value="191 217 108"/> <!-- colors drawer -->
    <BlockColor name="getter" rgb-value="217 229 255"/>
    <BlockColor name="call" rgb-value="198 193 232"/>

    <BlockColor name="grey" rgb-value="187 187 187"/>
    <BlockColor name="ode-none" rgb-value="255 255 255"/>
    <BlockColor name="ode-black" rgb-value="0 0 0"/>
    <BlockColor name="ode-blue" rgb-value="0 0 255"/>
    <BlockColor name="ode-cyan" rgb-value="0 255 255"/>
    <BlockColor name="ode-dark-gray" rgb-value="68 68 68"/>
    <BlockColor name="ode-gray" rgb-value="136 136 136"/>
    <BlockColor name="ode-green" rgb-value="00 255 00"/>
    <BlockColor name="ode-light-gray" rgb-value="204 204 204"/>
    <BlockColor name="ode-magenta" rgb-value="255 0 255"/>
    <BlockColor name="ode-orange" rgb-value="255 200 0"/>
    <BlockColor name="ode-pink" rgb-value="255 175 175"/>
    <BlockColor name="ode-red" rgb-value="255 0 0"/>
    <BlockColor name="ode-white" rgb-value="255 255 255"/>
    <BlockColor name="ode-yellow" rgb-value="255 255 0"/>
    <BlockColor name="hot-pink" rgb-value="255 105 180"/>
    <BlockColor name="goldenrod" rgb-value="218 165 32"/>
    <BlockColor name="thistle" rgb-value="232 191 232"/>
  </BlockColors>

  <BlockGenuses>

    <!-- Stub Genuses -->

    <!-- Getter stub for arguments. These don't have a corresponding setter -->
    <BlockGenus name="getter" kind="data" initlabel="" decorator="value" color="getter">
      <description>
        <text>Reports the value of the variable.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="getter"/>
        <LangSpecProperty key="plug-type-1" value="value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Getter stub for global vars -->
    <BlockGenus name="getterGlobal" kind="data" initlabel="" decorator="global" color="getter">
      <description>
        <text>Reports the value of the variable.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="getter"/>
        <LangSpecProperty key="plug-type-1" value="value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Getter stub for component properties -->
    <BlockGenus name="componentGetter" kind="data" initlabel="" color="getter">
      <description>
        <text>Reports the value of the component's property.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="componentGetter"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Generic getter stub for component properties -->
    <BlockGenus name="componentTypeGetter" kind="data" initlabel="" color="getter">
      <description>
        <text>Reports the value of the specified component's property.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="componentGetter"/>
        <LangSpecProperty key="is-from-component-type" value="true"/>
        <LangSpecProperty key="socket-allow-1" value="component/value"/>
        <LangSpecProperty key="socket-allow-2" value="component/component"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Setter stub for global vars -->
    <BlockGenus name="setterGlobal" kind="command" initlabel="" decorator="set global" color="setter">
      <description>
        <text>Sets the value of the variable. </text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="socket" label="to" connector-type="poly" position-type="single"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="setter"/>
        <LangSpecProperty key="socket-exclude-1" value="to/argument"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Setter stub for component properties -->
    <BlockGenus name="componentSetter" kind="command" initlabel="" color="setter" decorator="set">
      <description>
        <text>Sets the value of the component property.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="socket" label="to" connector-type="poly" position-type="single"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="componentSetter"/>
        <LangSpecProperty key="socket-exclude-1" value="to/argument"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Generic setter stub for component properties -->
    <BlockGenus name="componentTypeSetter" kind="command" initlabel="" color="setter" decorator="set">
      <description>
        <text>Sets the value of the specified component property.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
        <BlockConnector connector-kind="socket" label="to" connector-type="poly" position-type="single"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="componentSetter"/>
        <LangSpecProperty key="is-from-component-type" value="true"/>
        <LangSpecProperty key="socket-exclude-1" value="to/argument"/>
        <LangSpecProperty key="socket-allow-1" value="component/value"/>
        <LangSpecProperty key="socket-allow-2" value="component/component"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- End of Stub Genuses -->

    <!-- Collapsed Block -->

    <BlockGenus name="collapsed" kind="function" decorator="" initlabel="" color="setter">
      <description>
        <text>This block represents a collapsed procedure</text>
      </description>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="collapsed"/>
      </LangSpecProperties>
    </BlockGenus>


    <!-- Values -->

    <!-- Value Block -->
    <!-- TODO(gleitz): remove and use the autogenerated stubs -->
    <BlockGenus name="value" kind="data" initlabel="value" editable-label="yes" is-empty-label-allowed="yes" is-label-value="yes" color="text">
      <description>
        <text>Reports the value shown.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Component Block -->
    <BlockGenus name="component" kind="data" decorator="component" initlabel="" is-label-value="yes" color="getter">
      <description>
        <text>This block represents the given component</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="component"/>
        <LangSpecProperty key="plug-type-1" value="component"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Null Block -->
    <BlockGenus name="null" kind="data" initlabel="?" is-label-value="yes" color="text">
      <description>
        <text>A null block</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="null"/>
        <LangSpecProperty key="plug-type-1" value="null"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Number Block -->
    <BlockGenus name="number" kind="data" label-filter="number" decorator="number" initlabel="123" editable-label="yes" is-label-value="yes" color="math">
      <description>
        <text>Reports the number shown.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="number"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Colors -->
    <!-- TODO(sharon): temporary hack to get color blocks. We may
     want to generate these programmatically and/or have a color picker -->
    <BlockGenus name="color-none" kind="data" initlabel="None" decorator="color" is-label-value="no" color="ode-none">
      <description>
        <text> Inserts the number representing the named color </text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="color"/>
        <LangSpecProperty key="ya-hex-value" value="00FFFFFF"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="color-black" kind="data" initlabel="Black" decorator="color" is-label-value="no" color="ode-black">
      <description>
        <text> Inserts the number representing the named color </text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="color"/>
        <LangSpecProperty key="ya-hex-value" value="FF000000"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="color-blue" kind="data" initlabel="Blue" decorator="color" is-label-value="no" color="ode-blue">
      <description>
        <text> Inserts the number representing the named color </text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="color"/>
        <LangSpecProperty key="ya-hex-value" value="FF0000FF"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="color-cyan" kind="data" initlabel="Cyan" decorator="color" is-label-value="no" color="ode-cyan">
      <description>
        <text> Inserts the number representing the named color </text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="color"/>
        <LangSpecProperty key="ya-hex-value" value="FF00FFFF"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="color-dark-gray" kind="data" initlabel="Dark Gray" decorator="color" is-label-value="no" color="ode-dark-gray">
      <description>
        <text> Inserts the number representing the named color </text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="color"/>
        <LangSpecProperty key="ya-hex-value" value="FF444444"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="color-gray" kind="data" initlabel="Gray" decorator="color" is-label-value="no" color="ode-gray">
      <description>
        <text> Inserts the number representing the named color </text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="color"/>
        <LangSpecProperty key="ya-hex-value" value="FF888888"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="color-green" kind="data" initlabel="Green" decorator="color" is-label-value="no" color="ode-green">
      <description>
        <text> Inserts the number representing the named color </text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="color"/>
        <LangSpecProperty key="ya-hex-value" value="FF00FF00"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="color-light-gray" kind="data" initlabel="Light Gray" decorator="color" is-label-value="no" color="ode-light-gray">
      <description>
        <text> Inserts the number representing the named color </text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="color"/>
        <LangSpecProperty key="ya-hex-value" value="FFCCCCCC"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="color-magenta" kind="data" initlabel="Magenta" decorator="color" is-label-value="no" color="ode-magenta">
      <description>
        <text> Inserts the number representing the named color </text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="color"/>
        <LangSpecProperty key="ya-hex-value" value="FFFF00FF"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="color-orange" kind="data" initlabel="Orange" decorator="color" is-label-value="no" color="ode-orange">
      <description>
        <text> Inserts the number representing the named color </text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="color"/>
        <LangSpecProperty key="ya-hex-value" value="FFFFC800"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="color-pink" kind="data" initlabel="Pink" decorator="color" is-label-value="no" color="ode-pink">
      <description>
        <text> Inserts the number representing the named color </text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="color"/>
        <LangSpecProperty key="ya-hex-value" value="FFFFAFAF"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="color-red" kind="data" initlabel="Red" decorator="color" is-label-value="no" color="ode-red">
      <description>
        <text> Inserts the number representing the named color </text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="color"/>
        <LangSpecProperty key="ya-hex-value" value="FFFF0000"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="color-white" kind="data" initlabel="White" decorator="color" is-label-value="no" color="ode-white">
      <description>
        <text> Inserts the number representing the named color </text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="color"/>
        <LangSpecProperty key="ya-hex-value" value="FFFFFFFF"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="color-yellow" kind="data" initlabel="Yellow" decorator="color" is-label-value="no" color="ode-yellow">
      <description>
        <text> Inserts the number representing the named color </text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="color"/>
        <LangSpecProperty key="ya-hex-value" value="FFFFFF00"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Make-Color Block -->
    <BlockGenus name="make-color" decorator="call" kind="function" initlabel="make color" color="colors">
      <description>
      <text>A Color with the given red, green, blue, and (optionally) alpha components.</text>
      <arg-description n="1" name="components">A list of red, green, blue, and alpha components, each in the range 0 to 255; the alpha component may be omitted, in which case a value of 255 (fully opaque) will be used.</arg-description>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="components" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="make-color"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="components/list"/>
        <LangSpecProperty key="socket-allow-2" value="components/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Split-Color Block -->
    <BlockGenus name="split-color" decorator="call" kind="function" initlabel="split color" color="list">
      <description>
        <text>A list of four elements, each in the range 0 to 255, representing the red, blue, green, and alpha components.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="color" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="split-color"/>
        <LangSpecProperty key="plug-type-1" value="list"/>
        <LangSpecProperty key="socket-allow-1" value="color/number"/>
        <LangSpecProperty key="socket-allow-2" value="color/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Declarations -->

    <!-- Property Block -->
    <!-- While not explicitly in a drawer, property blocks are created by components -->
    <BlockGenus name="read-write-property" kind="param" initlabel="property" label-unique="yes" is-starter="yes" is-terminator="yes" color="text">
      <description>
        <text>Represents a component's property</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <Stubs>
        <Stub stub-genus="componentGetter"/>
        <Stub stub-genus="componentTypeGetter"/>
        <Stub stub-genus="componentSetter"/>
        <Stub stub-genus="componentTypeSetter"/>
      </Stubs>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="read-write-property"/>
      </LangSpecProperties>
    </BlockGenus>

        <BlockGenus name="read-only-property" kind="param" initlabel="property" label-unique="yes" is-starter="yes" is-terminator="yes" color="text">
      <description>
        <text>Represents a component's property</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <Stubs>
        <Stub stub-genus="componentGetter"/>
        <Stub stub-genus="componentTypeGetter"/>
      </Stubs>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="read-only-property"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="write-only-property" kind="param" initlabel="property" label-unique="yes" is-starter="yes" is-terminator="yes" color="text">
      <description>
        <text>Represents a component's property</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <Stubs>
        <Stub stub-genus="componentSetter"/>
        <Stub stub-genus="componentTypeSetter"/>
      </Stubs>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="write-only-property"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="invisible-property" kind="param" initlabel="property" label-unique="yes" is-starter="yes" is-terminator="yes" color="text">
      <description>
        <text>Represents a component's property</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <Stubs>
      </Stubs>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="invisible-property"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Argument Block -->
    <BlockGenus name="argument" kind="param" label-filter="identifier" initlabel="name" decorator="name" editable-label="yes" label-unique="yes" is-starter="yes" is-terminator="yes" color="getter">
      <description>
        <text>Argument for a function</text>
      </description>
      <BlockConnectors>
      <!-- TODO(gleitz): Allow for default arguments <BlockConnector connector-kind="socket" connector-type="poly"/> -->
      <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <Stubs>
        <!-- TODO(gleitz): Put labeled argument sockets in the caller block -->
        <Stub stub-genus="getter"/>
        <!-- arguments don't get setter stubs. too confusing for users. -->
      </Stubs>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="argument"/>
        <LangSpecProperty key="plug-type-1" value="argument"/>
      </LangSpecProperties>
    </BlockGenus>



    <!-- Def Block -->
    <!-- TODO(gleitz): put the getter/setter in a "variables" drawer -->
    <BlockGenus name="def" kind="param" label-filter="identifier" decorator="def" initlabel="variable" editable-label="yes" label-unique="yes" is-starter="yes" is-terminator="yes" color="setter">
      <description>
        <arg-description n="1" name="arg">The variable's initial value.</arg-description>
        <text>Defines a global variable.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="socket" label="as" connector-type="poly">
        </BlockConnector>
      </BlockConnectors>
      <Stubs>
        <Stub stub-genus="getterGlobal"/>
        <Stub stub-genus="setterGlobal"/>
      </Stubs>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="def"/>
        <LangSpecProperty key="socket-exclude-1" value="as/argument"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Procedures -->

    <!-- Define Block -->
    <BlockGenus name="define" label-filter="identifier" label-unique="yes" kind="function" decorator="to" initlabel="procedureWithResult" editable-label="yes" color="call">
      <description>
        <arg-description n="1" name="arg">Procedure argument</arg-description>
        <arg-description n="2" name="do"> The set of instructions that is done when the procedure is called.</arg-description>
        <text>Defines a procedure that returns a result. Calling the procedure (with its associated 'call' block) will run the blocks in the 'do' section and return the specified result.</text>
      </description>
      <Stubs>
        <Stub stub-genus="caller"/>
      </Stubs>
      <BlockConnectors>
        <BlockConnector label="arg" connector-kind="socket" is-expandable="yes" connector-type="poly"/>
        <BlockConnector label="do" connector-kind="socket" is-indented="yes" connector-type="cmd"/>
        <BlockConnector label="return" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="define"/>
        <LangSpecProperty key="socket-allow-1" value="arg/argument"/>
        <LangSpecProperty key="socket-exclude-1" value="return/argument"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="define-void" label-filter="identifier" label-unique="yes" kind="function" decorator="to" initlabel="procedure" editable-label="yes" color="call">
      <description>
        <arg-description n="1" name="arg">Procedure argument</arg-description>
        <arg-description n="2" name="do"> The set of instructions that is done when the procedure is called.</arg-description>
        <text>Defines a procedure that does not return a result. Calling the procedure (with its associated 'call' block) will run the blocks in the 'do' section.</text>
      </description>
      <Stubs>
        <Stub stub-genus="caller-command"/>
      </Stubs>
      <BlockConnectors>
        <BlockConnector label="arg" connector-kind="socket" is-expandable="yes" connector-type="poly"/>
        <BlockConnector label="do" connector-kind="socket" is-indented="yes" connector-type="cmd"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="define"/>
        <LangSpecProperty key="socket-allow-1" value="arg/argument"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Call Block -->
    <BlockGenus name="caller" label-filter="identifier" kind="function" decorator="call" initlabel="" color="call" editable-label="no">
      <description>
        <text>Calls the specified procedure, returning its result</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="call"/>
        <LangSpecProperty key="plug-type-1" value="value"/>
        <LangSpecProperty key="socket-exclude-1" value="*/argument"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="caller-command" label-filter="identifier" kind="command" decorator="call" initlabel="" color="call" editable-label="no">
      <description>
        <text>Calls the specified procedure</text>
      </description>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="call"/>
        <LangSpecProperty key="socket-exclude-1" value="*/argument"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Glue Block -->
    <BlockGenus name="glue" kind="command" initlabel="|" color="call">
      <description>
        <text>Runs the block associated with its attached block and ignores the return value</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="glue"/>
        <LangSpecProperty key="socket-exclude-1" value="default/argument"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Commands -->
    <!-- TODO(gleitz): determine how this should be used
    <BlockGenus name="localvar" initlabel="var" kind="command" color="text">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
    </BlockGenus>
    -->

    <!-- Control -->

    <!-- If Block -->
    <BlockGenus name="if" kind="command" initlabel="if" color="control">
      <description>
        <arg-description n="1" name="test"> The condition to test.</arg-description>
        <arg-description n="2" name="then-do">The actions to be performed when the condition is true.</arg-description>
        <text>Tests a given condition.  If the result is true, performs the actions in the 'then-do' sequence of blocks.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="test" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="then-do" connector-kind="socket" is-indented="yes" connector-type="cmd"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="if"/>
        <LangSpecProperty key="socket-allow-1" value="test/value"/>
        <LangSpecProperty key="socket-allow-2" value="test/boolean"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- IfElse Block -->
    <BlockGenus name="ifelse" kind="command" initlabel="ifelse" color="control">
      <description>
        <arg-description n="1" name="test">The condition to test.</arg-description>
        <arg-description n="2" name="then-do">The actions to be performed when test is true.</arg-description>
        <arg-description n="3" name="else">The actions to be performed when test is false.</arg-description>
        <text>Tests a given condition.  If the result is true, performs the actions in the 'then-do' sequence of blocks;
         otherwise, performs the actions in the 'else-do' sequence of blocks.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="test" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="then-do" connector-kind="socket" is-indented="yes" connector-type="cmd"/>
        <BlockConnector label="else-do" connector-kind="socket" is-indented="yes" connector-type="cmd"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="ifelse"/>
        <LangSpecProperty key="socket-allow-1" value="test/value"/>
        <LangSpecProperty key="socket-allow-2" value="test/boolean"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Choose Block -->
    <BlockGenus name="choose" kind="function" initlabel="choose" color="control">
      <description>
        <arg-description n="1" name="test">The condition being tested.</arg-description>
        <arg-description n="2" name="then-do">The set of instructions that is done when test is true.</arg-description>
        <arg-description n="3" name="then-return"> The return value when the test is true.</arg-description>
        <arg-description n="4" name="else">The set of instructions that is done when test is false.</arg-description>
        <arg-description n="5" name="else-return">The return value when the test is false.</arg-description>
        <text>If the condition being tested is true, the agent will run all the blocks attached to the 'then-do' section and
return the value attached to the 'then-return'slot. Otherwise, the agent will run all blocks attached to the 'else-do'
section and return the value in the 'else-return' slot.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="test" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="then-do" connector-kind="socket" is-indented="yes" connector-type="cmd"/>
        <BlockConnector label="then-return" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="else-do" connector-kind="socket" is-indented="yes" connector-type="cmd"/>
        <BlockConnector label="else-return" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="choose"/>
        <LangSpecProperty key="type-exclude-1" value="argument"/>
        <LangSpecProperty key="socket-allow-1" value="test/value"/>
        <LangSpecProperty key="socket-allow-2" value="test/boolean"/>
        <LangSpecProperty key="socket-exclude-1" value="then-return/argument"/>
        <LangSpecProperty key="socket-exclude-2" value="else-return/argument"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- ForEach Block -->
    <BlockGenus name="foreach" initlabel="foreach" kind="command" color="control">
      <description>
        <arg-description n="1" name="variable">Name for the variable that will refer to each item in the list</arg-description>
        <arg-description n="2" name="do">Sequence of commands to do for each value of the variable</arg-description>
        <arg-description n="3" name="in list">List of values for the variable</arg-description>
        <text>Runs the blocks in the 'do'  section for each item in the list.  Use the given variable
name to refer to the current list item.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="variable" label-unique="yes" connector-kind="socket" connector-type="poly">
          <DefaultArg genus-name="argument" label="var"/>
        </BlockConnector>
        <BlockConnector label="do" connector-kind="socket" is-indented="yes" connector-type="cmd"/>
        <BlockConnector label="in list" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="foreach"/>
        <LangSpecProperty key="socket-allow-1" value="variable/argument"/>
        <LangSpecProperty key="socket-allow-2" value="in list/list"/>
        <LangSpecProperty key="socket-allow-3" value="in list/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Foreach in range block -->
    <BlockGenus name="forrange" initlabel="for range" kind="command" color="control">
      <description>
        <arg-description n="1" name="variable">The variable that will refer to each item in the range</arg-description>
        <arg-description n="2" name="start">Start of the range</arg-description>
        <arg-description n="3" name="end">End of the range</arg-description>
        <arg-description n="4" name="step">Amount to step the variable each time</arg-description>
        <arg-description n="4" name="do">Sequence of commands to do for each value of the variable</arg-description>
        <text>Runs the blocks in the 'do' section for each numeric value in the range from start to end, stepping the
value each time.  Use the given variable name to refer to the current value.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="variable" label-unique="yes" connector-kind="socket" connector-type="poly">
          <DefaultArg genus-name="argument" label="i"/>
        </BlockConnector>
        <BlockConnector label="start" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="end" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="step" connector-kind="socket" connector-type="poly">
          <DefaultArg genus-name="number" label="1"/>
        </BlockConnector>
        <BlockConnector label="do" connector-kind="socket" is-indented="yes" connector-type="cmd"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="forrange"/>
        <LangSpecProperty key="socket-allow-1" value="variable/argument"/>
        <LangSpecProperty key="socket-allow-2" value="start/number"/>
        <LangSpecProperty key="socket-allow-3" value="start/value"/>
        <LangSpecProperty key="socket-allow-4" value="end/number"/>
        <LangSpecProperty key="socket-allow-5" value="end/value"/>
        <LangSpecProperty key="socket-allow-6" value="step/number"/>
        <LangSpecProperty key="socket-allow-7" value="step/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- While Block -->
    <BlockGenus name="while" initlabel="while" kind="command" color="control">
      <description>
        <text>Runs the blocks in the 'do' section while the test is true.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="test" label-unique="yes" connector-kind="socket" connector-type="poly" />
        <BlockConnector label="do" connector-kind="socket" is-indented="yes" connector-type="cmd"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="while"/>
        <LangSpecProperty key="socket-allow-1" value="test/boolean"/>
        <LangSpecProperty key="socket-allow-2" value="test/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Multiple screens  -->

    <!-- Get Start Text Block -->
    <!-- This block is deprecated and has been removed from the drawer (see 
     OUTPUT_FOOTER.txt).  The BlockGenus remains here so we can load blocks from old
     projects and mark them "bad" -->
    <BlockGenus name="get-startup-text" decorator="call" kind="function" initlabel="get start text" color="control">
      <description>
      <text>Returns the text passed to this app when it was started, if any. If no text was passed, returns an empty text.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="startup-value"/>
        <LangSpecProperty key="plug-type-1" value="text"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Close Screen Block -->
    <BlockGenus name="close-screen" decorator="call" kind="command" initlabel="close screen" is-terminator="yes" color="control">
      <description>
        <text>Closes the current screen.</text>
      </description>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="close-screen"/>
      </LangSpecProperties>
    </BlockGenus>

   <!-- Close Screen With Result Block -->
    <!-- This block is deprecated and has been removed from the drawer (see 
     OUTPUT_FOOTER.txt).  The BlockGenus remains here so we can load blocks from old
     projects and mark them "bad" -->
   <BlockGenus name="close-screen-with-result" decorator="call" kind="command" initlabel="close screen with result" is-terminator="yes" color="control">
      <description>
        <arg-description n="1" doc-name="result">
          Text to be returned when the screen closes.
        </arg-description>
        <text>Closes the current screen and returns a result that can be picked up by
        another screen or application. The result will be named APP_INVENTOR_RESULT.
        </text>
      </description>
      <BlockConnectors>
        <BlockConnector label="result" connector-kind="socket" connector-type="poly">
        </BlockConnector>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="close-screen-with-result"/>
        <LangSpecProperty key="socket-allow-1" value="result/text"/>
        <LangSpecProperty key="socket-allow-2" value="result/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Close Application Block -->
    <BlockGenus name="close-application" decorator="call" kind="command" initlabel="close application" is-terminator="yes" color="control">
      <description>
        <text>Closes all screens in this app and stops the app.</text>
      </description>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="close-application"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Open Another Screen Block -->
    <BlockGenus name="open-another-screen" decorator="call" kind="command" initlabel="open another screen" is-terminator="yes" color="control">
      <description>
        <arg-description n="1" doc-name="screenName">
          The name of the new screen to open.
        </arg-description>
        <text>Opens a new screen in a multiple screen app.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="screenName" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="open-another-screen"/>
        <LangSpecProperty key="socket-allow-1" value="screenName/text"/>
        <LangSpecProperty key="socket-allow-2" value="screenName/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Open Another Screen With Start Value Block -->
    <BlockGenus name="open-another-screen-with-start-value" decorator="call" kind="command" 
       initlabel="open another screen with start value" is-terminator="yes" color="control">
      <description>
        <arg-description n="1" doc-name="screenName">
          The name of the new screen to open.
        </arg-description>
        <arg-description n="2" doc-name="startValue">
          The value to be passed to the new screen.
        </arg-description>
        <text>Opens a new screen in a multiple screen app and passes the start value to that screen.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="screenName" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="startValue" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="open-another-screen-with-start-value"/>
        <LangSpecProperty key="socket-allow-1" value="screenName/text"/>
        <LangSpecProperty key="socket-allow-2" value="screenName/value"/>
        <LangSpecProperty key="socket-exclude-1" value="startValue/argument"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Get Start Value Block -->
    <BlockGenus name="get-start-value"
       decorator="call" kind="function" initlabel="get start value" color="control">
      <description>
      <text>Returns the value that was passed to this screen when it
was opened, typically by another screen in a multiple-screen app.
If no value was passed, returns the empty text.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="get-start-value"/>
      </LangSpecProperties>
    </BlockGenus>

   <!-- Close Screen With Value Block -->
   <BlockGenus name="close-screen-with-value" decorator="call" kind="command" 
          initlabel="close screen with value" is-terminator="yes" color="control">
      <description>
        <arg-description n="1" doc-name="result">
          Value to return when the screen closes.
       </arg-description>
        <text>Closes the current screen and returns a result to the screen that opened this one.
        </text>
      </description>
      <BlockConnectors>
        <BlockConnector label="result" connector-kind="socket" connector-type="poly">
        </BlockConnector>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="close-screen-with-value"/>
        <LangSpecProperty key="socket-exclude-1" value="result/argument"/>
      </LangSpecProperties>
    </BlockGenus>

    <!--Communicating between apps -->

     <!-- Get Plain Start Text Block -->
     <BlockGenus name="get-plain-start-text"
                 decorator="call" kind="function" initlabel="get plain start text" color=" control">
       <description>
         <text>Returns the plain text that was passed to this screen when it was started by another app.
If no value was passed, returns the empty text.
        
For multiple screen apps, use get start value rather than get plain start text.
         </text>
       </description>
       <BlockConnectors>
         <BlockConnector connector-kind="plug" connector-type="poly"/>
       </BlockConnectors>
       <LangSpecProperties>
         <LangSpecProperty key="ya-kind" value="primitive"/>
         <LangSpecProperty key="ya-rep" value="get-plain-start-text"/>
         <LangSpecProperty key="plug-type-1" value="text"/>
       </LangSpecProperties>
     </BlockGenus>

        
     <!-- Close Screen With Plain Text Block -->
     <BlockGenus name="close-screen-with-plain-text" decorator="call" kind="command"
                 initlabel="close screen with plain text" is-terminator="yes" color="control">
       <description>
         <arg-description n="1" doc-name="text">
           Text to return when the screen closes.
         </arg-description>
         <text>Closes the current screen and returns text to the app that opened this one.

For multiple screen apps, use close screen with value rather than close screen with plain text.
         </text>
       </description>
       <BlockConnectors>
         <BlockConnector label="text" connector-kind="socket" connector-type="poly">
         </BlockConnector>
       </BlockConnectors>
       <LangSpecProperties>
         <LangSpecProperty key="ya-kind" value="primitive"/>
         <LangSpecProperty key="ya-rep" value="close-screen-with-plain-text"/>
         <LangSpecProperty key="socket-allow-1" value="text/text"/>
         <LangSpecProperty key="socket-allow-2" value="text/value"/>
       </LangSpecProperties>
     </BlockGenus>

    <!-- Logic -->

    <!-- True Block -->
    <BlockGenus name="true" kind="data" initlabel="true" is-label-value="yes" color="logic">
      <description>
        <text>  Reports the boolean true.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="true"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- False Block -->
    <BlockGenus name="false" kind="data" initlabel="false" is-label-value="yes" color="logic">
      <description>
        <text> Reports the boolean false.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="false"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- And Block -->
    <BlockGenus name="and" kind="function" initlabel="and" color="logic">
      <description>
        <text>Returns true if all connected blocks are true</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="test" connector-kind="socket" is-expandable="yes" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="and"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-allow-1" value="test/boolean"/>
        <LangSpecProperty key="socket-allow-2" value="test/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Or Block -->
    <BlockGenus name="or" kind="function" initlabel="or" color="logic">
      <description>
        <text>Returns true if any connected blocks are true</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="test" connector-kind="socket" is-expandable="yes" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="or"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-allow-1" value="test/boolean"/>
        <LangSpecProperty key="socket-allow-2" value="test/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Logical-Not Block -->
    <BlockGenus name="logical-not" initlabel="not" kind="function" color="logic">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-not"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-allow-1" value="default/boolean"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Strings -->

    <!-- Text Block -->
    <BlockGenus name="text" kind="data" label-filter="string" decorator="text" initlabel="text" is-empty-label-allowed="yes" editable-label="yes" color="text">
      <description>
        <text>A text string</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="text"/>
        <LangSpecProperty key="plug-type-1" value="text"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Yail-Equal Block -->

    <BlockGenus name="yail-equal" kind="function" initlabel="=" color="math">
      <description>
        <text>Tests whether two things are equal.  The things being compared can be anything, not only numbers.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-equal?"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-exclude-1" value="default/argument"/>
      </LangSpecProperties>
    </BlockGenus>


    <!-- Yail-Not-Equal Block -->
    <BlockGenus name="yail-not-equal" kind="function" initlabel="not =" color="math">
      <description>
        <text>Tests whether two things are unequal.  The things being compared can be anything, not only numbers.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-not-equal?"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-exclude-1" value="default/argument"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Append Block -->
    <BlockGenus name="string-append" kind="function" initlabel="join" color="text">
      <description>
      <arg-description n="2" doc-name="first">the beginning of the new string</arg-description>
      <arg-description n="3" doc-name="second">the end of the new string</arg-description>
      <text>Appends the second argument to the end of the first argument.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-append"/>
        <LangSpecProperty key="plug-type-1" value="text"/>
        <LangSpecProperty key="socket-allow-1" value="default/text"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Append Vertical Block -->
    <BlockGenus name="string-vappend" decorator="call" kind="function" initlabel="make text" color="text">
      <description>
        <text>Appends all the arguments to form a single text string. If there are no arguments, makes an empty text.</text>
        <arg-description n="1" name="text" doc-name="text">Item to include</arg-description>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly" is-expandable="yes"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-append"/>
        <LangSpecProperty key="plug-type-1" value="text"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Length Block -->
    <BlockGenus name="string-length" decorator="call" kind="function" initlabel="length" color="text">
      <description>
        <text>Reports the length of the text attached to this block.</text>
        <arg-description n="1" name="text" doc-name="text">The text whose length should be returned</arg-description>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-length"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-LessThan Block -->
    <BlockGenus name="string-less-than" kind="function" initlabel="text&lt;" color="text">
      <description>
        <arg-description n="1" doc-name="text1">
          The first text string to compare.
        </arg-description>
        <arg-description n="2" doc-name="text2">
          The second text string to compare.
        </arg-description>
        <text>Tests whether text1 is lexicographically less than text2. If one text is a prefix of the other, the shorter text is considered smaller. Uppercase characters precede lowercase characters.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text1" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="text2" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string&lt;?"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-allow-1" value="text1/text"/>
        <LangSpecProperty key="socket-allow-2" value="text1/value"/>
        <LangSpecProperty key="socket-allow-3" value="text2/text"/>
        <LangSpecProperty key="socket-allow-4" value="text2/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Equal Block -->
    <BlockGenus name="string-equal" kind="function" initlabel="text=" color="text">
      <description>
        <arg-description n="1" doc-name="text1">
          The first text string to compare.
        </arg-description>
        <arg-description n="2" doc-name="text2">
          The second text string to compare.
        </arg-description>
        <text>Tests whether the text strings are identical, i.e., have the same characters in the same order.  This is different from ordinary = in the case where the text strings are numbers: 123 and 0123 are = but not text=.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text1" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="text2" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string=?"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-allow-1" value="text1/text"/>
        <LangSpecProperty key="socket-allow-2" value="text1/value"/>
        <LangSpecProperty key="socket-allow-3" value="text2/text"/>
        <LangSpecProperty key="socket-allow-4" value="text2/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-GreaterThan Block -->
    <BlockGenus name="string-greater-than" kind="function" initlabel="text&gt;" color="text">
      <description>
        <arg-description n="1" doc-name="text1">
          The first text string to compare.
        </arg-description>
        <arg-description n="2" doc-name="text2">
          The second text string to compare.
        </arg-description>
        <text>Reports whether the text1 is lexicographically greater than text2. If one text is a prefix of the other, the shorter text is considered smaller. Uppercase characters precede lowercase characters.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text1" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="text2" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string&gt;?"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-allow-1" value="text1/text"/>
        <LangSpecProperty key="socket-allow-2" value="text1/value"/>
        <LangSpecProperty key="socket-allow-3" value="text2/text"/>
        <LangSpecProperty key="socket-allow-4" value="text2/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Upcase Block -->
    <BlockGenus name="string-upcase" kind="function" initlabel="upcase" color="text">
      <description>
        <arg-description n="1" doc-name="text">
          The text string to convert to upper case
        </arg-description>
        <text>Returns a copy of its text string argument converted to uppercase.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-to-upper-case"/>
        <LangSpecProperty key="plug-type-1" value="text"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Downcase Block -->
    <BlockGenus name="string-downcase" kind="function" initlabel="downcase" color="text">
      <description>
        <arg-description n="1" doc-name="text">
          The text string to convert to lower case
        </arg-description>
        <text>Returns a copy of its text string argument converted to lowercase.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-to-lower-case"/>
        <LangSpecProperty key="plug-type-1" value="text"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Trim Block -->
    <BlockGenus name="string-trim" kind="function" initlabel="trim" color="text">
      <description>
        <arg-description n="1" doc-name="text">
          The text string to trim.
        </arg-description>
        <text>Returns a copy of its text string argument with any leading or trailing spaces removed.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-trim"/>
        <LangSpecProperty key="plug-type-1" value="text"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Starts-At-Block -->
    <BlockGenus name="string-starts-at" decorator="call" kind="function" initlabel="starts at" color="text">
      <description>
        <arg-description n="1" doc-name="text">
          The text to search for the piece.
        </arg-description>
        <arg-description n="2" doc-name="piece">
          The piece (a text string) to search for in the text.
        </arg-description>
        <text>Returns the starting index of the piece in the text, where index 1 denotes the beginning of the text. Returns 0 if the piece is not in the text.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="piece" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-starts-at"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
        <LangSpecProperty key="socket-allow-3" value="piece/text"/>
        <LangSpecProperty key="socket-allow-4" value="piece/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Contains-Block -->
    <BlockGenus name="string-contains" decorator="call" kind="function" initlabel="contains" color="text">
      <description>
        <arg-description n="1" doc-name="text">
          The text to search for the piece.
        </arg-description>
        <arg-description n="2" doc-name="piece">
          The piece (a text string) to search for in the text.
        </arg-description>
        <text>Tests whether the piece is in the text</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="piece" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-contains"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
        <LangSpecProperty key="socket-allow-3" value="piece/text"/>
        <LangSpecProperty key="socket-allow-4" value="piece/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Split-At-First-Block -->
    <BlockGenus name="string-split-at-first" decorator="call" kind="function" initlabel="split at first" color="text">
      <description>
        <arg-description n="1" doc-name="text">
          The text to split.
        </arg-description>
        <arg-description n="2" doc-name="at">
          The delimiter text.
        </arg-description>
        <text>Split the text into two pieces separated by the first occurrence of 'at'. Returns a two-element list with the two pieces. Returns a one-element list with original text if 'at' is not contained in the text.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="at" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-split-at-first"/>
        <LangSpecProperty key="plug-type-1" value="list"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
        <LangSpecProperty key="socket-allow-3" value="at/text"/>
        <LangSpecProperty key="socket-allow-4" value="at/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Split-At-First-of-Any-Block -->
    <BlockGenus name="string-split-at-first-of-any" decorator="call" kind="function" initlabel="split at first of any" color="text">
      <description>
        <arg-description n="1" doc-name="text">
          The text to split.
        </arg-description>
        <arg-description n="2" doc-name="at">
          A list of delimiter text strings to that are places to split at.
        </arg-description>
        <text>Split the text into two pieces separated by the first occurrence of any of the elements in the list 'at', and return the list of these pieces. Returns a one-element list with the original text if no elements of 'at' are in the text.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="at" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-split-at-first-of-any"/>
        <LangSpecProperty key="plug-type-1" value="list"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
        <LangSpecProperty key="socket-allow-3" value="at/list"/>
        <LangSpecProperty key="socket-allow-4" value="at/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Split Block -->
    <BlockGenus name="string-split" decorator="call" kind="function" initlabel="split" color="text">
      <description>
        <arg-description n="1" doc-name="text">
          The text to split.
        </arg-description>
        <arg-description n="2" doc-name="at">
          The delimiter text.
        </arg-description>
        <text>Split the text into pieces separated by the occurrences of 'at', and return the list of these pieces. Returns a one-element list with the original text if 'at' is not in the text.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="at" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-split"/>
        <LangSpecProperty key="plug-type-1" value="list"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
        <LangSpecProperty key="socket-allow-3" value="at/text"/>
        <LangSpecProperty key="socket-allow-4" value="at/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Split-Any Block -->
    <BlockGenus name="string-split-at-any" decorator="call" kind="function" initlabel="split at any" color="text">
      <description>
        <arg-description n="1" doc-name="text">
          The text to split.
        </arg-description>
        <arg-description n="2" doc-name="at">
          A list of delimiter text strings to search for as places to split at.
        </arg-description>
        <text>Split the text into pieces separated by the occurrences of any of the elements in the list 'at', and return the list of these pieces. Returns a one-element list with the original text if no elements of 'at' are in the text.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="at" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-split-at-any"/>
        <LangSpecProperty key="plug-type-1" value="list"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
        <LangSpecProperty key="socket-allow-3" value="at/list"/>
        <LangSpecProperty key="socket-allow-4" value="at/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Split-At-Spaces Block -->
    <BlockGenus name="string-split-at-spaces" decorator="call" kind="function" initlabel="split at spaces" color="text">
      <description>
        <arg-description n="1" doc-name="text">
          The text to split.
        </arg-description>
        <text>Split the text into a list of the pieces separated by spaces.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-split-at-spaces"/>
        <LangSpecProperty key="plug-type-1" value="list"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Substring Block -->
    <BlockGenus name="string-subtext" decorator="call" kind="function" initlabel="segment" color="text">
      <description>
        <arg-description n="1" doc-name="text">
          The text to extract from
        </arg-description>
        <arg-description n="2" doc-name="start">
          The starting position (a number) of the segment.
        </arg-description>
        <arg-description n="3" doc-name="length">
          The length of the segment
        </arg-description>
        <text>Extracts the segment of the given length from the given text, starting from the given position. Position 1 denotes the beginning of the text.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="start" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="length" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-substring"/>
        <LangSpecProperty key="plug-type-1" value="text"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
        <LangSpecProperty key="socket-allow-3" value="start/number"/>
        <LangSpecProperty key="socket-allow-4" value="start/value"/>
        <LangSpecProperty key="socket-allow-5" value="length/number"/>
        <LangSpecProperty key="socket-allow-6" value="length/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Replace-All-Block -->
    <BlockGenus name="string-replace-all" decorator="call" kind="function" initlabel="replace all" color="text">
      <description>
        <arg-description n="1" doc-name="text">
          The text to do the replacement in
        </arg-description>
        <arg-description n="2" doc-name="segment">
          The segment to replace
        </arg-description>
        <arg-description n="3" doc-name="replacement">
          The replacement for the segment
        </arg-description>
      <text>Returns a new text obtained by replacing all occurrences of the segment with the replacement</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="segment" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="replacement" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-replace-all"/>
        <LangSpecProperty key="plug-type-1" value="text"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
        <LangSpecProperty key="socket-allow-3" value="segment/text"/>
        <LangSpecProperty key="socket-allow-4" value="segment/value"/>
        <LangSpecProperty key="socket-allow-5" value="replacement/text"/>
        <LangSpecProperty key="socket-allow-6" value="replacement/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String Empty Block -->
    <BlockGenus name="string-empty?" kind="function" initlabel="is text empty?" color="text">
      <description>
        <arg-description n="1" doc-name="text">
          The text string.
        </arg-description>
        <text>Returns true if the length of the text is 0, false otherwise.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-empty?"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Lists -->

    <ObsoleteBlockGenus name="list" initlabel="list" color="list"/>
    <ObsoleteBlockGenus name="set-list-item" initlabel="set list item" color="list"/>
    <ObsoleteBlockGenus name="add-to-list" initlabel="add items to list" color="list"/>
    <ObsoleteBlockGenus name="adjoin" initlabel="adjoin" color="list"/>
    <ObsoleteBlockGenus name="member" initlabel="member" color="list"/>
    <ObsoleteBlockGenus name="list-first" initlabel="first" color="list"/>
    <ObsoleteBlockGenus name="list-rest" initlabel="rest" color="list"/>
    <ObsoleteBlockGenus name="pick-list-item" initlabel="pick list item" color="list"/>

    <!-- Make-List Block -->
    <BlockGenus name="make-list" decorator="call" kind="function" initlabel="make a list" color="list">
      <description>
        <text>Makes a list of the given items. If there are no items, makes an empty list.</text>
        <arg-description n="1" name="item" doc-name="item">Item to include in the list</arg-description>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="item" connector-kind="socket" connector-type="poly"
                        is-indented="yes" is-expandable="yes"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="make-yail-list"/>
        <LangSpecProperty key="socket-exclude-1" value="item/argument"/>
        <LangSpecProperty key="plug-type-1" value="list"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Is-list? block -->
    <BlockGenus name="is-list?" decorator="call" kind="function" initlabel="is a list?" color="list">
      <description>
        <arg-description n="1" name="thing" doc-name="thing">The thing to test.</arg-description>
        <text>Tests if something is a list.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="thing" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list?"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-exclude-1" value="thing/argument"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- List Empty Block -->
    <BlockGenus name="list-empty?" decorator="call" kind="function" initlabel="is list empty?" color="list">
      <description>
        <arg-description n="1" name="list" doc-name="list">The list to test</arg-description>
        <text>Tests if a list is empty (has no items in it)</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-empty?"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-allow-1" value="list/list"/>
        <LangSpecProperty key="socket-allow-2" value="list/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- List Length Block -->
    <BlockGenus name="list-length" decorator="call" kind="function" initlabel="length of list" color="list">
      <description>
        <arg-description n="1" name="list" doc-name="list">The list to find the length of</arg-description>
        <text>Counts the number of items in a list.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-length"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="list/list"/>
        <LangSpecProperty key="socket-allow-2" value="list/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- First and Rest are removed, to simplify the API to lists -->
    <!-- List First Block -->
    <!--
    <BlockGenus name="list-first" decorator="call" kind="function" initlabel="first in list" color="list">
      <description>
        <arg-description n="1" name="list" doc-name="list">The list</arg-description>
        <text>Gets the first item in a list.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-first"/>
        <LangSpecProperty key="type-exclude-1" value="argument"/>
        <LangSpecProperty key="socket-allow-1" value="list/list"/>
        <LangSpecProperty key="socket-allow-2" value="list/value"/>
      </LangSpecProperties>
    </BlockGenus>
    -->


  <!-- List Rest Block -->
  <!--
    <BlockGenus name="list-rest" decorator="call" kind="function" initlabel="rest of list" color="list">
      <description>
        <arg-description n="1" name="list" doc-name="list">The list</arg-description>
        <text>Gets the rest of the list, after the first item.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-rest"/>
        <LangSpecProperty key="plug-type-1" value="list"/>
        <LangSpecProperty key="socket-allow-1" value="list/list"/>
        <LangSpecProperty key="socket-allow-2" value="list/value"/>
      </LangSpecProperties>
    </BlockGenus>
 -->

  <!-- List Copy -->
    <BlockGenus name="list-copy" decorator="call" kind="function" initlabel="copy list" color="list">
      <description>
        <arg-description n="1" name="list" doc-name="list">The list</arg-description>
        <text>Makes a copy of a list, including copying all sublists</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-copy"/>
        <LangSpecProperty key="plug-type-1" value="list"/>
        <LangSpecProperty key="socket-allow-1" value="list/list"/>
        <LangSpecProperty key="socket-allow-2" value="list/value"/>
      </LangSpecProperties>
    </BlockGenus>

      <!-- List from CSV row string -->
    <BlockGenus name="list-from-csv-row" decorator="call" kind="function" initlabel="list from csv row" color="list">
      <description>
        <arg-description n="1" name="list" doc-name="list">The CSV row text</arg-description>
        <text>Parses a text as a CSV (comma-separated value) formatted row to produce a list of fields. It is an error for the row text to contain unescaped newlines inside fields (effectively, multiple lines). It is okay for the row text to end in a single newline or CRLF.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-from-csv-row"/>
        <LangSpecProperty key="plug-type-1" value="list"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
      </LangSpecProperties>
    </BlockGenus>

       <!-- List from CSV table Block -->
    <BlockGenus name="list-from-csv-table" decorator="call" kind="function" initlabel="list from csv table" color="list">
      <description>
        <arg-description n="1" name="list" doc-name="list">The CSV table text</arg-description>
        <text>Parses a text as a CSV (comma-separated value) formatted table to produce a list of rows, each of which is a list of fields. Rows can be separated by newlines (\n) or CRLF (\r\n).</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-from-csv-table"/>
        <LangSpecProperty key="plug-type-1" value="list"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
      </LangSpecProperties>
    </BlockGenus>

      <!-- List to CSV row Block -->
    <BlockGenus name="list-to-csv-row" decorator="call" kind="function" initlabel="list to csv row" color="list">
      <description>
        <arg-description n="1" name="list" doc-name="list">The list</arg-description>
        <text>Interprets the list as a row of a table and returns a CSV (comma-separated value) text representing the row. Each item in the row list is considered to be a field, and is quoted with double-quotes in the resulting CSV text. Items are separated by commas. The returned row text does not have a line separator at the end. </text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-to-csv-row"/>
        <LangSpecProperty key="plug-type-1" value="text"/>
        <LangSpecProperty key="socket-allow-1" value="list/list"/>
        <LangSpecProperty key="socket-allow-2" value="list/value"/>
      </LangSpecProperties>
    </BlockGenus>

      <!-- List to CSV table Block -->
    <BlockGenus name="list-to-csv-table" decorator="call" kind="function" initlabel="list to csv table" color="list">
      <description>
        <arg-description n="1" name="list" doc-name="list">The list</arg-description>
        <text>Interprets the list as a table in row-major format and returns a CSV (comma-separated value) text representing the table. Each item in the list should itself be a list representing a row of the CSV table. Each item in the row list is considered to be a field, and is quoted with double-quotes in the resulting CSV text. In the returned text, items in rows are separated by commas and rows are separated by CRLF (\r\n).</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-to-csv-table"/>
        <LangSpecProperty key="plug-type-1" value="text"/>
        <LangSpecProperty key="socket-allow-1" value="list/list"/>
        <LangSpecProperty key="socket-allow-2" value="list/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- List Get Item Block -->
    <BlockGenus name="get-list-item" decorator="call" kind="function" initlabel="select list item" color="list">
      <description>
        <arg-description n="1" name="list" doc-name="list">The list </arg-description>
        <arg-description n="2" name="index" doc-name="index">The position of the item to retrieve</arg-description>
        <text>Get the nth item from a list.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="index" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-get-item"/>
        <LangSpecProperty key="type-exclude-1" value="argument"/>
        <LangSpecProperty key="socket-allow-1" value="list/list"/>
        <LangSpecProperty key="socket-allow-2" value="list/value"/>
        <LangSpecProperty key="socket-allow-3" value="index/number"/>
        <LangSpecProperty key="socket-allow-4" value="index/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- List Pick Random Block -->
    <BlockGenus name="list-pick-random" decorator="call" kind="function" initlabel="pick random item" color="list">
      <description>
        <arg-description n="1" name="list" doc-name="list">The list </arg-description>
        <text>Pick an element at random from the list.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-pick-random"/>
        <LangSpecProperty key="type-exclude-1" value="argument"/>
        <LangSpecProperty key="socket-allow-1" value="list/list"/>
        <LangSpecProperty key="socket-allow-2" value="list/value"/>
      </LangSpecProperties>
    </BlockGenus>


    <!-- List Set Item Block -->
    <BlockGenus name="replace-list-item" decorator="call" kind="command" initlabel="replace list item" color="list">
      <description>
        <arg-description n="1" name="list" doc-name="list"> The list</arg-description>
        <arg-description n="2" name="index" doc-name="index">The position of the item to replace</arg-description>
        <arg-description n="3" name="replacement" doc-name="replacement">The replacement for the item</arg-description>
        <text>Replaces the nth item in a list.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="index" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="replacement" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-set-item!"/>
        <LangSpecProperty key="socket-allow-1" value="list/list"/>
        <LangSpecProperty key="socket-allow-2" value="list/value"/>
        <LangSpecProperty key="socket-allow-3" value="index/number"/>
        <LangSpecProperty key="socket-allow-4" value="index/value"/>
        <LangSpecProperty key="socket-exclude-1" value="replacement/argument"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- List Remove Item Block -->
    <BlockGenus name="remove-list-item" decorator="call" kind="command" initlabel="remove list item" color="list">
      <description>
        <arg-description n="1" name="list" doc-name="list">The list</arg-description>
        <arg-description n="2" name="index" doc-name="index">The position of the item to remove</arg-description>
        <text>Removes the item at the specified position from the list.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="index" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-remove-item!"/>
        <LangSpecProperty key="socket-allow-1" value="list/list"/>
        <LangSpecProperty key="socket-allow-2" value="list/value"/>
        <LangSpecProperty key="socket-allow-3" value="index/number"/>
        <LangSpecProperty key="socket-allow-4" value="index/value"/>
      </LangSpecProperties>
    </BlockGenus>


    <!-- List Insert Item Block -->
    <BlockGenus name="insert-list-item" decorator="call" kind="command" initlabel="insert list item" color="list">
      <description>
        <arg-description n="1" name="list" doc-name="list"> The list</arg-description>
        <arg-description n="2" name="index" doc-name="index">The position where the item should be inserted</arg-description>
        <arg-description n="3" name="item" doc-name="item">The item to insert</arg-description>
        <text>Insert an item into a list at the specified position.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="index" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="item" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-insert-item!"/>
        <LangSpecProperty key="socket-allow-1" value="list/list"/>
        <LangSpecProperty key="socket-allow-2" value="list/value"/>
        <LangSpecProperty key="socket-allow-3" value="index/number"/>
        <LangSpecProperty key="socket-allow-4" value="index/value"/>
        <LangSpecProperty key="socket-exclude-1" value="item/argument"/>
      </LangSpecProperties>
    </BlockGenus>


    <!-- List Append Block -->
    <BlockGenus name="append-list" decorator="call" kind="command" initlabel="append to list" color="list">
      <description>
        <arg-description n="1" name="list1" doc-name="list1">The list to append on to</arg-description>
        <arg-description n="2" name="list2" doc-name="list2">The list of items to be appended</arg-description>
        <text>Appends all the items in list2 onto the end of list1.  After the append, list1 will include these additional elements, but list2 will be unchanged.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="list1" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="list2" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-append!"/>
        <LangSpecProperty key="socket-allow-1" value="list1/list"/>
        <LangSpecProperty key="socket-allow-2" value="list1/value"/>
        <LangSpecProperty key="socket-allow-3" value="list2/list"/>
        <LangSpecProperty key="socket-allow-4" value="list2/value"/>
      </LangSpecProperties>
    </BlockGenus>


    <!-- List Add-Items-to-List Block -->
    <BlockGenus name="add-items-to-list" decorator="call" kind="command" initlabel="add items to list" color="list">
      <description>
        <arg-description n="1" name="list" doc-name="list">The list</arg-description>
        <arg-description n="2" name="item" doc-name="item"> The item to add to the list</arg-description>
        <text>Adds items to the end of a list.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="item" connector-kind="socket" is-expandable="yes" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-add-to-list!"/>
        <LangSpecProperty key="socket-allow-1" value="list/list"/>
        <LangSpecProperty key="socket-allow-2" value="list/value"/>
        <LangSpecProperty key="socket-exclude-1" value="item/argument"/>
      </LangSpecProperties>
    </BlockGenus>


    <!-- List Member Block -->
    <BlockGenus name="list-member" decorator="call" kind="function" initlabel="is in list?" color="list">
      <description>
        <arg-description n="1" name="thing" doc-name="thing">The thing to find in the list</arg-description>
        <arg-description n="2" name="list" doc-name="list">The list to check for the thing</arg-description>
        <text>Retuns true if the the thing is an item in the list, and false if not.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="thing" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-member?"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-exclude-1" value="thing/argument"/>
        <LangSpecProperty key="socket-allow-1" value="list/list"/>
        <LangSpecProperty key="socket-allow-2" value="list/value"/>
      </LangSpecProperties>
    </BlockGenus>


    <!-- List Index Block -->
    <BlockGenus name="list-index" decorator="call" kind="function" initlabel="position in list" color="list">
      <description>
        <arg-description n="1" name="thing" doc-name="thing">The thing whose position to find</arg-description>
        <arg-description n="2" name="list" doc-name="list">The list</arg-description>
        <text>Find the position of the thing in the list.  If it's not in the list, return 0.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="thing" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-index"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-exclude-1" value="thing/argument"/>
        <LangSpecProperty key="socket-allow-1" value="list/list"/>
        <LangSpecProperty key="socket-allow-2" value="list/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- List Lookup in Pairs Block -->
    <BlockGenus name="list-lookup-in-pairs" decorator="call" kind="function" initlabel="lookup in pairs " color="list">
      <description>
        <arg-description n="1" name="key" doc-name="key">The key to look up </arg-description>
        <arg-description n="2" name="pairs" doc-name="pairs">A list of (key value) pairs</arg-description>
        <arg-description n="3" name="notFound" 
                 doc-name="notFound">Value to return if there is no pair with the given key.</arg-description>
        <text>Returns the value associated with the key in the list of pairs.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="key" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="pairs" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="notFound" connector-kind="socket" connector-type="poly">
          <DefaultArg genus-name="text" label="NotFound"/>
        </BlockConnector>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-alist-lookup"/>
        <LangSpecProperty key="type-exclude-1" value="argument"/>
        <LangSpecProperty key="socket-exclude-1" value="key/argument"/>
        <LangSpecProperty key="socket-allow-1" value="pairs/value"/>
        <LangSpecProperty key="socket-allow-2" value="pairs/list"/>
        <LangSpecProperty key="socket-allow-3" value="notFound/text"/>
        <LangSpecProperty key="socket-allow-4" value="notFound/text"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Math -->

    <!-- Greaterthan Block -->
    <BlockGenus name="greaterthan" kind="function" initlabel=">" color="math">
      <description>
        <arg-description n="1" doc-name="left value">
          The first number to compare.
        </arg-description>
        <arg-description n="2" doc-name="right value">
          The second number to compare.
        </arg-description>
        <text>Tests whether the first number is greater than the second number.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value=">"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- GreaterthanOrEqual Block -->
    <BlockGenus name="greaterthanorequal" kind="function" initlabel=">=" color="math">
      <description>
        <arg-description n="1" doc-name="left value">
          The first number to compare.
        </arg-description>
        <arg-description n="2" doc-name="right value">
          The second number to compare.
        </arg-description>
        <text>Tests whether the first number is greater than or equal to the second number.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value=">="/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>


    <!-- Lessthan Block -->
    <BlockGenus name="lessthan" kind="function" initlabel="&lt;" color="math">
      <description>
        <arg-description n="1" doc-name="left value">
          The first number to compare.
        </arg-description>
        <arg-description n="2" doc-name="right value">
          The second number to compare.
        </arg-description>
        <text>Tests whether the first number is less than the second number.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="&lt;"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- LessthanOrEqual Block -->
    <BlockGenus name="lessthanorequal" kind="function" initlabel="&lt;=" color="math">
      <description>
        <arg-description n="1" doc-name="left value">
          The first number to compare.
        </arg-description>
        <arg-description n="2" doc-name="right value">
          The second number to compare.
        </arg-description>
        <text>Tests whether the first number is less than or equal to the second number.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="&lt;="/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>


    <BlockGenus name="number-plus" kind="function" initlabel="+" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="+"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Here we are specifying a non-ascii character (minus sign) as a label. -->
    <BlockGenus name="number-minus" kind="function" initlabel="&#x2212;" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="-"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Here we are specifying a non-ascii character (times sign) as a label. -->
    <BlockGenus name="number-times" kind="function" initlabel="&#x00D7;" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="*"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- It would be nicer to use a real division symbol here, but that looks too much like
         a + sign in Arial on the Mac
    -->
    <BlockGenus name="number-divide" kind="function" initlabel="/" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-divide"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-sqrt" decorator="call" kind="function" initlabel="sqrt" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="sqrt"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-negate" decorator="call" kind="function" initlabel="negate" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="-"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-min" decorator="call" kind="function" initlabel="min" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" is-expandable="yes" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="min"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-max" decorator="call" kind="function" initlabel="max" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" is-expandable="yes" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="max"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-quotient" decorator="call" kind="function" initlabel="quotient" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="quotient"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-remainder" decorator="call" kind="function" initlabel="remainder" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="remainder"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-modulo" decorator="call" kind="function" initlabel="modulo" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="modulo"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-abs" decorator="call" kind="function" initlabel="abs" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="abs"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-round" decorator="call" kind="function" initlabel="round" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-round"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-floor" decorator="call" kind="function" initlabel="floor" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-floor"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-ceiling" decorator="call" kind="function" initlabel="ceiling" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-ceiling"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-expt" decorator="call" kind="function" initlabel="expt" color="math">
       <description>
        <arg-description n="1" doc-name="base">
          The number to raise to the exponent.
        </arg-description>
        <arg-description n="2" doc-name="exponent">
          The power to raise the base to.
        </arg-description>
        <text>Returns the result of raising the base to the exponent.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="base" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="exponent" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="expt"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="exponent/number"/>
        <LangSpecProperty key="socket-allow-2" value="exponent/value"/>
        <LangSpecProperty key="socket-allow-3" value="base/number"/>
        <LangSpecProperty key="socket-allow-4" value="base/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-exp" decorator="call" kind="function" initlabel="exp" color="math">
       <description>
        <arg-description n="1" doc-name="exponent">
          The power to raise e to.
        </arg-description>
        <text>Returns the result of raising the mathematical constant 'e' to the given exponent.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="exp"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-log" decorator="call" kind="function" initlabel="log" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="log"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-sin" decorator="call" kind="function" initlabel="sin" color="math">
      <description>
        <arg-description n="1" doc-name="degrees">
          An angle expressed in degrees
        </arg-description>
        <text>Provides the sine of the given angle in degrees</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="degrees" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="sin-degrees"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="degrees/number"/>
        <LangSpecProperty key="socket-allow-2" value="degrees/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-cos" decorator="call" kind="function" initlabel="cos" color="math">
      <description>
        <arg-description n="1" doc-name="degrees">
          An angle expressed in degrees
        </arg-description>
        <text>Provides the cosine of the given angle in degrees</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="degrees" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="cos-degrees"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="degrees/number"/>
        <LangSpecProperty key="socket-allow-2" value="degrees/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-tan" decorator="call" kind="function" initlabel="tan" color="math">
      <description>
        <arg-description n="1" doc-name="degrees">
          An angle expressed in degrees
        </arg-description>
        <text>Provides the tangent of the given angle in degrees</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="degrees" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="tan-degrees"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="degrees/number"/>
        <LangSpecProperty key="socket-allow-2" value="degrees/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-asin" decorator="call" kind="function" initlabel="asin" color="math">
      <description>
        <text>Provides the angle in the range (-90, +90] degrees with the given sine value</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="asin-degrees"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-acos" decorator="call" kind="function" initlabel="acos" color="math">
      <description>
        <text>Provides the angle in the range [0, 180) degrees with the given cosine value</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="acos-degrees"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-atan" decorator="call" kind="function" initlabel="atan" color="math">
      <description>
        <text>Provides the angle in the range (-90, +90) degrees with the given tangent value</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="atan-degrees"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-atan2" decorator="call" kind="function" initlabel="atan2" color="math">
      <description>
        <arg-description n="1" doc-name="y">
          the y-coordinate
        </arg-description>
        <arg-description n="2" doc-name="x">
          the x-coordinate
        </arg-description>
        <text>Provides the angle in the range (-180, +180] degrees corresponding to the given rectangular coordinates</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="atan2-degrees"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="y/number"/>
        <LangSpecProperty key="socket-allow-2" value="y/value"/>
        <LangSpecProperty key="socket-allow-3" value="x/number"/>
        <LangSpecProperty key="socket-allow-4" value="x/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-radians-to-degrees" decorator="call" kind="function" initlabel="convert radians to degrees" color="math">
      <description>
        <arg-description n="1" doc-name="radians" />
        <text>Returns the degree value in the range [0, 360) corresponding to its radians argument</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="radians" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="radians->degrees"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="radians/number"/>
        <LangSpecProperty key="socket-allow-2" value="radians/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-degrees-to-radians" decorator="call" kind="function" initlabel="convert degrees to radians" color="math">
      <description>
        <arg-description n="1" doc-name="degrees" />
        <text>Returns the radian value in the range [-Pi, +Pi) corresponding to its degrees argument</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="degrees" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="degrees->radians"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="degrees/number"/>
        <LangSpecProperty key="socket-allow-2" value="degrees/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-random-set-seed" decorator="call" kind="command" initlabel="random set seed" color="math">
      <description>
        <arg-description n="1" doc-name="seed">
          Numeric seed for random number generator
        </arg-description>
        <text>Specifies a numeric seed for the random number generator.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="seed" connector-kind="socket" connector-type="poly">
        </BlockConnector>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="random-set-seed"/>
        <LangSpecProperty key="socket-allow-1" value="seed/number"/>
        <LangSpecProperty key="socket-allow-2" value="seed/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-random-fraction" decorator="call" kind="function" initlabel="random fraction" color="math">
      <description>
        <text>Returns a random number between 0 and 1.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="random-fraction"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-random-integer" decorator="call" kind="function" initlabel="random integer" color="math">
      <description>
        <arg-description n="1" doc-name="lower bound">
          The lower bound
        </arg-description>
        <arg-description n="2" doc-name="upper bound">
          The upper bound
        </arg-description>
        <text>Returns a random integer between the lower bound and the upper bound.  The bounds will be clipped to be smaller than 2**30.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="from" connector-kind="socket" connector-type="poly">
          <DefaultArg genus-name="number" label="1"/>
        </BlockConnector>
        <BlockConnector label="to" connector-kind="socket" connector-type="poly">
          <DefaultArg genus-name="number" label="100"/>
        </BlockConnector>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="random-integer"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="from/number"/>
        <LangSpecProperty key="socket-allow-2" value="from/value"/>
        <LangSpecProperty key="socket-allow-3" value="to/number"/>
        <LangSpecProperty key="socket-allow-4" value="to/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="format-as-decimal" decorator="call" kind="function" initlabel="format as decimal" color="math">
      <description>
        <arg-description n="1" doc-name="number">
          The number to be formatted
        </arg-description>
        <arg-description n="2" doc-name="places">
          The number of places
        </arg-description>
        <text>Returns the number formatted as a decimal with a specified number of places.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="number" connector-kind="socket" connector-type="poly">
        </BlockConnector>
        <BlockConnector label="places" connector-kind="socket" connector-type="poly">
        </BlockConnector>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="format-as-decimal"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
       <LangSpecProperty key="socket-allow-1" value="number/number"/>
        <LangSpecProperty key="socket-allow-2" value="number/value"/>
        <LangSpecProperty key="socket-allow-3" value="places/number"/>
        <LangSpecProperty key="socket-allow-4" value="places/value"/>
      </LangSpecProperties>
    </BlockGenus>


    <!-- Is-number? block -->
    <BlockGenus name="number-is-number?" decorator="call" kind="function" initlabel="is a number?" color="math">
      <description>
        <arg-description n="1" name="thing" doc-name="thing">The thing to test.</arg-description>
        <text>Tests if something is a number.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="thing" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="is-number?"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-exclude-1" value="thing/argument"/>
      </LangSpecProperties>
    </BlockGenus>


    <!-- COMPONENTS BEGIN HERE -->

<!-- Camera Component -->

<BlockGenus name="Camera" initlabel="Camera"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A component to take a picture using the device&apos;s camera. After the picture is taken, the name of the file on the phone containing the picture is available as an argument to the AfterPicture event. The file name can be used, for example, to set the Picture property of an Image component.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="2"/>
    <LangSpecProperty key="ya-event-1" value="Camera-AfterPicture"/>
    <LangSpecProperty key="ya-prop-1" value="UseFront/read-write-property/boolean/Specifies whether the front-facing camera should be used (when available). If the device does not have a front-facing camera, this option will be ignored and the camera will open normally."/>
    <LangSpecProperty key="ya-method-1" value="Camera-TakePicture"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-Camera-TakePicture"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="Camera-AfterPicture" initlabel="AfterPicture"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that a photo was taken with the camera and provides the path to the stored picture.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="image" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="image"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="image/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="Camera-TakePicture" decorator="call" initlabel="TakePicture"
            kind="command" color="call">
  <description>
    <text>Takes a picture, then raises the AfterPicture event. If useFront is true, adds an extra to the intent that requests the front-facing camera.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Camera-TakePicture" decorator="call" initlabel="TakePicture"
            kind="command" color="call">
  <description>
    <text>Takes a picture, then raises the AfterPicture event. If useFront is true, adds an extra to the intent that requests the front-facing camera.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- Canvas Component -->

<BlockGenus name="Canvas" initlabel="Canvas"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A two-dimensional touch-sensitive rectangular panel on which drawing can be done and sprites can be moved. The BackgroundColor, PaintColor, BackgroundImage, Width, and Height of the Canvas can be set in either the Designer or in the Blocks Editor. The Width and Height are measured in pixels and must be positive. Any location on the Canvas can be specified as a pair of (X, Y) values, where - X is the number of pixels away from the left edge of the Canvas - Y is the number of pixels away from the top edge of the Canvas. There are events to tell when and where a Canvas has been touched or a Sprite (ImageSprite or Ball) has been dragged. There are also methods for drawing points, lines, and circles.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="7"/>
    <LangSpecProperty key="ya-event-1" value="Canvas-Dragged"/>
    <LangSpecProperty key="ya-event-2" value="Canvas-Flung"/>
    <LangSpecProperty key="ya-event-3" value="Canvas-TouchDown"/>
    <LangSpecProperty key="ya-event-4" value="Canvas-TouchUp"/>
    <LangSpecProperty key="ya-event-5" value="Canvas-Touched"/>
    <LangSpecProperty key="ya-prop-1" value="BackgroundColor/read-write-property/number/The color of the canvas background."/>
    <LangSpecProperty key="ya-prop-2" value="BackgroundImage/read-write-property/text/The name of a file containing the background image for the canvas"/>
    <LangSpecProperty key="ya-prop-3" value="Column/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-4" value="FontSize/read-write-property/number/The font size of text drawn on the canvas."/>
    <LangSpecProperty key="ya-prop-5" value="Height/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-6" value="LineWidth/read-write-property/number/The width of lines drawn on the canvas."/>
    <LangSpecProperty key="ya-prop-7" value="PaintColor/read-write-property/number/The color in which lines are drawn"/>
    <LangSpecProperty key="ya-prop-8" value="Row/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-9" value="TextAlignment/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-10" value="Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."/>
    <LangSpecProperty key="ya-prop-11" value="Width/read-write-property/number/"/>
    <LangSpecProperty key="ya-method-1" value="Canvas-Clear"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-Canvas-Clear"/>
    <LangSpecProperty key="ya-method-2" value="Canvas-DrawCircle"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-Canvas-DrawCircle"/>
    <LangSpecProperty key="ya-method-3" value="Canvas-DrawLine"/>
    <LangSpecProperty key="ya-type-method-3" value="Type-Canvas-DrawLine"/>
    <LangSpecProperty key="ya-method-4" value="Canvas-DrawPoint"/>
    <LangSpecProperty key="ya-type-method-4" value="Type-Canvas-DrawPoint"/>
    <LangSpecProperty key="ya-method-5" value="Canvas-DrawText"/>
    <LangSpecProperty key="ya-type-method-5" value="Type-Canvas-DrawText"/>
    <LangSpecProperty key="ya-method-6" value="Canvas-DrawTextAtAngle"/>
    <LangSpecProperty key="ya-type-method-6" value="Type-Canvas-DrawTextAtAngle"/>
    <LangSpecProperty key="ya-method-7" value="Canvas-GetBackgroundPixelColor"/>
    <LangSpecProperty key="ya-type-method-7" value="Type-Canvas-GetBackgroundPixelColor"/>
    <LangSpecProperty key="ya-method-8" value="Canvas-GetPixelColor"/>
    <LangSpecProperty key="ya-type-method-8" value="Type-Canvas-GetPixelColor"/>
    <LangSpecProperty key="ya-method-9" value="Canvas-Save"/>
    <LangSpecProperty key="ya-type-method-9" value="Type-Canvas-Save"/>
    <LangSpecProperty key="ya-method-10" value="Canvas-SaveAs"/>
    <LangSpecProperty key="ya-type-method-10" value="Type-Canvas-SaveAs"/>
    <LangSpecProperty key="ya-method-11" value="Canvas-SetBackgroundPixelColor"/>
    <LangSpecProperty key="ya-type-method-11" value="Type-Canvas-SetBackgroundPixelColor"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="Canvas-Dragged" initlabel="Dragged"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>When the user does a drag from one point (prevX, prevY) to another (x, y). The pair (startX, startY) indicates where the user first touched the screen, and &quot;draggedSprite&quot; indicates whether a sprite is being dragged.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="startX" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="startX"/>
    </BlockConnector>
    <BlockConnector label="startY" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="startY"/>
    </BlockConnector>
    <BlockConnector label="prevX" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="prevX"/>
    </BlockConnector>
    <BlockConnector label="prevY" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="prevY"/>
    </BlockConnector>
    <BlockConnector label="currentX" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="currentX"/>
    </BlockConnector>
    <BlockConnector label="currentY" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="currentY"/>
    </BlockConnector>
    <BlockConnector label="draggedSprite" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="draggedSprite"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="startX/argument"/>
    <LangSpecProperty key="socket-allow-2" value="startY/argument"/>
    <LangSpecProperty key="socket-allow-3" value="prevX/argument"/>
    <LangSpecProperty key="socket-allow-4" value="prevY/argument"/>
    <LangSpecProperty key="socket-allow-5" value="currentX/argument"/>
    <LangSpecProperty key="socket-allow-6" value="currentY/argument"/>
    <LangSpecProperty key="socket-allow-7" value="draggedSprite/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Canvas-Flung" initlabel="Flung"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>When a fling gesture (quick swipe) is made on the canvas: provides the (x,y) position of the start of the fling, relative to the upper left of the canvas. Also provides the speed (pixels per millisecond) and heading (0-360 degrees) of the fling, as well as the x velocity and y velocity components of the fling&apos;s vector. The value &quot;flungSprite&quot; is true if a sprite was located near the the starting point of the fling gesture.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="x"/>
    </BlockConnector>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="y"/>
    </BlockConnector>
    <BlockConnector label="speed" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="speed"/>
    </BlockConnector>
    <BlockConnector label="heading" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="heading"/>
    </BlockConnector>
    <BlockConnector label="xvel" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="xvel"/>
    </BlockConnector>
    <BlockConnector label="yvel" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="yvel"/>
    </BlockConnector>
    <BlockConnector label="flungSprite" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="flungSprite"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="x/argument"/>
    <LangSpecProperty key="socket-allow-2" value="y/argument"/>
    <LangSpecProperty key="socket-allow-3" value="speed/argument"/>
    <LangSpecProperty key="socket-allow-4" value="heading/argument"/>
    <LangSpecProperty key="socket-allow-5" value="xvel/argument"/>
    <LangSpecProperty key="socket-allow-6" value="yvel/argument"/>
    <LangSpecProperty key="socket-allow-7" value="flungSprite/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Canvas-TouchDown" initlabel="TouchDown"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>When the user begins touching the canvas (places finger on canvas and leaves it there): provides the (x,y) position of the touch, relative to the upper left of the canvas</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="x"/>
    </BlockConnector>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="y"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="x/argument"/>
    <LangSpecProperty key="socket-allow-2" value="y/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Canvas-TouchUp" initlabel="TouchUp"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>When the user stops touching the canvas (lifts finger after a TouchDown event): provides the (x,y) position of the touch, relative to the upper left of the canvas</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="x"/>
    </BlockConnector>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="y"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="x/argument"/>
    <LangSpecProperty key="socket-allow-2" value="y/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Canvas-Touched" initlabel="Touched"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>When the user touches the canvas and then immediately lifts finger: provides the (x,y) position of the touch, relative to the upper left of the canvas. TouchedSprite is true if the same touch also touched a sprite, and false otherwise.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="x"/>
    </BlockConnector>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="y"/>
    </BlockConnector>
    <BlockConnector label="touchedSprite" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="touchedSprite"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="x/argument"/>
    <LangSpecProperty key="socket-allow-2" value="y/argument"/>
    <LangSpecProperty key="socket-allow-3" value="touchedSprite/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="Canvas-Clear" decorator="call" initlabel="Clear"
            kind="command" color="call">
  <description>
    <text>Clears anything drawn on this Canvas but not any background color or image.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Canvas-Clear" decorator="call" initlabel="Clear"
            kind="command" color="call">
  <description>
    <text>Clears anything drawn on this Canvas but not any background color or image.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Canvas-DrawCircle" decorator="call" initlabel="DrawCircle"
            kind="command" color="call">
  <description>
    <text>Draws a circle (filled in) at the given coordinates on the canvas, with the given radius.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="r" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="x/value"/>
    <LangSpecProperty key="socket-allow-2" value="y/value"/>
    <LangSpecProperty key="socket-allow-3" value="r/value"/>
    <LangSpecProperty key="socket-allow-4" value="x/number"/>
    <LangSpecProperty key="socket-allow-5" value="y/number"/>
    <LangSpecProperty key="socket-allow-6" value="r/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Canvas-DrawCircle" decorator="call" initlabel="DrawCircle"
            kind="command" color="call">
  <description>
    <text>Draws a circle (filled in) at the given coordinates on the canvas, with the given radius.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="r" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="x/value"/>
    <LangSpecProperty key="socket-allow-4" value="y/value"/>
    <LangSpecProperty key="socket-allow-5" value="r/value"/>
    <LangSpecProperty key="socket-allow-6" value="x/number"/>
    <LangSpecProperty key="socket-allow-7" value="y/number"/>
    <LangSpecProperty key="socket-allow-8" value="r/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Canvas-DrawLine" decorator="call" initlabel="DrawLine"
            kind="command" color="call">
  <description>
    <text>Draws a line between the given coordinates on the canvas.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x1" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y1" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="x2" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y2" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="x1/value"/>
    <LangSpecProperty key="socket-allow-2" value="y1/value"/>
    <LangSpecProperty key="socket-allow-3" value="x2/value"/>
    <LangSpecProperty key="socket-allow-4" value="y2/value"/>
    <LangSpecProperty key="socket-allow-5" value="x1/number"/>
    <LangSpecProperty key="socket-allow-6" value="y1/number"/>
    <LangSpecProperty key="socket-allow-7" value="x2/number"/>
    <LangSpecProperty key="socket-allow-8" value="y2/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Canvas-DrawLine" decorator="call" initlabel="DrawLine"
            kind="command" color="call">
  <description>
    <text>Draws a line between the given coordinates on the canvas.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="x1" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y1" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="x2" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y2" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="x1/value"/>
    <LangSpecProperty key="socket-allow-4" value="y1/value"/>
    <LangSpecProperty key="socket-allow-5" value="x2/value"/>
    <LangSpecProperty key="socket-allow-6" value="y2/value"/>
    <LangSpecProperty key="socket-allow-7" value="x1/number"/>
    <LangSpecProperty key="socket-allow-8" value="y1/number"/>
    <LangSpecProperty key="socket-allow-9" value="x2/number"/>
    <LangSpecProperty key="socket-allow-10" value="y2/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Canvas-DrawPoint" decorator="call" initlabel="DrawPoint"
            kind="command" color="call">
  <description>
    <text>Draws a point at the given coordinates on the canvas.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="x/value"/>
    <LangSpecProperty key="socket-allow-2" value="y/value"/>
    <LangSpecProperty key="socket-allow-3" value="x/number"/>
    <LangSpecProperty key="socket-allow-4" value="y/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Canvas-DrawPoint" decorator="call" initlabel="DrawPoint"
            kind="command" color="call">
  <description>
    <text>Draws a point at the given coordinates on the canvas.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="x/value"/>
    <LangSpecProperty key="socket-allow-4" value="y/value"/>
    <LangSpecProperty key="socket-allow-5" value="x/number"/>
    <LangSpecProperty key="socket-allow-6" value="y/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Canvas-DrawText" decorator="call" initlabel="DrawText"
            kind="command" color="call">
  <description>
    <text>Draws the specified text relative to the specified coordinates using the values of the FontSize and TextAlignment properties.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="text/value"/>
    <LangSpecProperty key="socket-allow-2" value="x/value"/>
    <LangSpecProperty key="socket-allow-3" value="y/value"/>
    <LangSpecProperty key="socket-allow-4" value="text/text"/>
    <LangSpecProperty key="socket-allow-5" value="x/number"/>
    <LangSpecProperty key="socket-allow-6" value="y/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Canvas-DrawText" decorator="call" initlabel="DrawText"
            kind="command" color="call">
  <description>
    <text>Draws the specified text relative to the specified coordinates using the values of the FontSize and TextAlignment properties.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="text/value"/>
    <LangSpecProperty key="socket-allow-4" value="x/value"/>
    <LangSpecProperty key="socket-allow-5" value="y/value"/>
    <LangSpecProperty key="socket-allow-6" value="text/text"/>
    <LangSpecProperty key="socket-allow-7" value="x/number"/>
    <LangSpecProperty key="socket-allow-8" value="y/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Canvas-DrawTextAtAngle" decorator="call" initlabel="DrawTextAtAngle"
            kind="command" color="call">
  <description>
    <text>Draws the specified text starting at the specified coordinates at the specified angle using the values of the FontSize and TextAlignment properties.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="angle" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="text/value"/>
    <LangSpecProperty key="socket-allow-2" value="x/value"/>
    <LangSpecProperty key="socket-allow-3" value="y/value"/>
    <LangSpecProperty key="socket-allow-4" value="angle/value"/>
    <LangSpecProperty key="socket-allow-5" value="text/text"/>
    <LangSpecProperty key="socket-allow-6" value="x/number"/>
    <LangSpecProperty key="socket-allow-7" value="y/number"/>
    <LangSpecProperty key="socket-allow-8" value="angle/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Canvas-DrawTextAtAngle" decorator="call" initlabel="DrawTextAtAngle"
            kind="command" color="call">
  <description>
    <text>Draws the specified text starting at the specified coordinates at the specified angle using the values of the FontSize and TextAlignment properties.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="angle" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="text/value"/>
    <LangSpecProperty key="socket-allow-4" value="x/value"/>
    <LangSpecProperty key="socket-allow-5" value="y/value"/>
    <LangSpecProperty key="socket-allow-6" value="angle/value"/>
    <LangSpecProperty key="socket-allow-7" value="text/text"/>
    <LangSpecProperty key="socket-allow-8" value="x/number"/>
    <LangSpecProperty key="socket-allow-9" value="y/number"/>
    <LangSpecProperty key="socket-allow-10" value="angle/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Canvas-GetBackgroundPixelColor" decorator="call" initlabel="GetBackgroundPixelColor"
            kind="function" color="call">
  <description>
    <text>Gets the color of the specified point. This includes the background and any drawn points, lines, or circles but not sprites.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="x/value"/>
    <LangSpecProperty key="socket-allow-2" value="y/value"/>
    <LangSpecProperty key="socket-allow-3" value="x/number"/>
    <LangSpecProperty key="socket-allow-4" value="y/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Canvas-GetBackgroundPixelColor" decorator="call" initlabel="GetBackgroundPixelColor"
            kind="function" color="call">
  <description>
    <text>Gets the color of the specified point. This includes the background and any drawn points, lines, or circles but not sprites.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="x/value"/>
    <LangSpecProperty key="socket-allow-4" value="y/value"/>
    <LangSpecProperty key="socket-allow-5" value="x/number"/>
    <LangSpecProperty key="socket-allow-6" value="y/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Canvas-GetPixelColor" decorator="call" initlabel="GetPixelColor"
            kind="function" color="call">
  <description>
    <text>Gets the color of the specified point.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="x/value"/>
    <LangSpecProperty key="socket-allow-2" value="y/value"/>
    <LangSpecProperty key="socket-allow-3" value="x/number"/>
    <LangSpecProperty key="socket-allow-4" value="y/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Canvas-GetPixelColor" decorator="call" initlabel="GetPixelColor"
            kind="function" color="call">
  <description>
    <text>Gets the color of the specified point.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="x/value"/>
    <LangSpecProperty key="socket-allow-4" value="y/value"/>
    <LangSpecProperty key="socket-allow-5" value="x/number"/>
    <LangSpecProperty key="socket-allow-6" value="y/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Canvas-Save" decorator="call" initlabel="Save"
            kind="function" color="call">
  <description>
    <text>Saves a picture of this Canvas to the device&apos;s external storage. If an error occurs, the Screen&apos;s ErrorOccurred event will be called.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Canvas-Save" decorator="call" initlabel="Save"
            kind="function" color="call">
  <description>
    <text>Saves a picture of this Canvas to the device&apos;s external storage. If an error occurs, the Screen&apos;s ErrorOccurred event will be called.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Canvas-SaveAs" decorator="call" initlabel="SaveAs"
            kind="function" color="call">
  <description>
    <text>Saves a picture of this Canvas to the device&apos;s external storage in the file named fileName. fileName must end with one of .jpg, .jpeg, or .png, which determines the file type.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="fileName" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="fileName/value"/>
    <LangSpecProperty key="socket-allow-2" value="fileName/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Canvas-SaveAs" decorator="call" initlabel="SaveAs"
            kind="function" color="call">
  <description>
    <text>Saves a picture of this Canvas to the device&apos;s external storage in the file named fileName. fileName must end with one of .jpg, .jpeg, or .png, which determines the file type.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="fileName" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="fileName/value"/>
    <LangSpecProperty key="socket-allow-4" value="fileName/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Canvas-SetBackgroundPixelColor" decorator="call" initlabel="SetBackgroundPixelColor"
            kind="command" color="call">
  <description>
    <text>Sets the color of the specified point. This differs from DrawPoint by having an argument for color.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="color" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="x/value"/>
    <LangSpecProperty key="socket-allow-2" value="y/value"/>
    <LangSpecProperty key="socket-allow-3" value="color/value"/>
    <LangSpecProperty key="socket-allow-4" value="x/number"/>
    <LangSpecProperty key="socket-allow-5" value="y/number"/>
    <LangSpecProperty key="socket-allow-6" value="color/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Canvas-SetBackgroundPixelColor" decorator="call" initlabel="SetBackgroundPixelColor"
            kind="command" color="call">
  <description>
    <text>Sets the color of the specified point. This differs from DrawPoint by having an argument for color.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="color" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="x/value"/>
    <LangSpecProperty key="socket-allow-4" value="y/value"/>
    <LangSpecProperty key="socket-allow-5" value="color/value"/>
    <LangSpecProperty key="socket-allow-6" value="x/number"/>
    <LangSpecProperty key="socket-allow-7" value="y/number"/>
    <LangSpecProperty key="socket-allow-8" value="color/number"/>
  </LangSpecProperties>
</BlockGenus>

<!-- Screen Component -->

<BlockGenus name="Screen" initlabel="Screen"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Top-level component containing all other components in the program</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="12"/>
    <LangSpecProperty key="ya-event-1" value="Screen-BackPressed"/>
    <LangSpecProperty key="ya-event-2" value="Screen-ErrorOccurred"/>
    <LangSpecProperty key="ya-event-3" value="Screen-Initialize"/>
    <LangSpecProperty key="ya-event-4" value="Screen-OtherScreenClosed"/>
    <LangSpecProperty key="ya-event-5" value="Screen-ScreenOrientationChanged"/>
    <LangSpecProperty key="ya-prop-1" value="AboutScreen/read-write-property/text/Information about the screen. It appears when &quot;About this Application&quot; is selected from the system menu. Use it to inform people about your app. In multiple screen apps, each screen has its own AboutScreen info."/>
    <LangSpecProperty key="ya-prop-2" value="AlignHorizontal/read-write-property/number/A number that encodes how contents of the screen are aligned horizontally. The choices are: 1 = left aligned, 2 = horizontally centered, 3 = right aligned."/>
    <LangSpecProperty key="ya-prop-3" value="AlignVertical/read-write-property/number/A number that encodes how the contents of the arrangement are aligned vertically. The choices are: 1 = aligned at the top, 2 = vertically centered, 3 = aligned at the bottom. Vertical alignment has no effect if the screen is scrollable."/>
    <LangSpecProperty key="ya-prop-4" value="BackgroundColor/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-5" value="BackgroundImage/read-write-property/text/The screen background image."/>
    <LangSpecProperty key="ya-prop-6" value="CloseScreenAnimation/read-write-property/text/The animation for closing current screen and returning to the previous screen. Valid options are default, fade, zoom, slidehorizontal, slidevertical, and none"/>
    <LangSpecProperty key="ya-prop-7" value="Height/read-only-property/number/Screen height (y-size)."/>
    <LangSpecProperty key="ya-prop-8" value="Icon/invisible-property/text/"/>
    <LangSpecProperty key="ya-prop-9" value="OpenScreenAnimation/read-write-property/text/The animation for switching to another screen. Valid options are default, fade, zoom, slidehorizontal, slidevertical, and none"/>
    <LangSpecProperty key="ya-prop-10" value="ScreenOrientation/read-write-property/text/The requested screen orientation. Commonly used values are unspecified (-1), landscape (0), portrait (1), sensor (4), and user (2). See the Android developer docuemntation for ActivityInfo.Screen_Orientation for the complete list of possible settings."/>
    <LangSpecProperty key="ya-prop-11" value="Scrollable/read-write-property/boolean/When checked, there will be a vertical scrollbar on the screen, and the height of the application can exceed the physical height of the device. When unchecked, the application height is constrained to the height of the device."/>
    <LangSpecProperty key="ya-prop-12" value="Title/read-write-property/text/The caption for the form, which apears in the title bar"/>
    <LangSpecProperty key="ya-prop-13" value="VersionCode/invisible-property/number/An integer value which must be incremented each time a new Android Application Package File (APK) is created for the Google Play Store."/>
    <LangSpecProperty key="ya-prop-14" value="VersionName/invisible-property/text/A string which can be changed to allow Google Play Store users to distinguish between different versions of the App."/>
    <LangSpecProperty key="ya-prop-15" value="Width/read-only-property/number/Screen width (x-size)."/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="Screen-BackPressed" initlabel="BackPressed"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Device back button pressed.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Screen-ErrorOccurred" initlabel="ErrorOccurred"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event raised when an error occurs. Only some errors will raise this condition. For those errors, the system will show a notification by default. You can use this event handler to prescribe an error behavior different than the default.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="component"/>
    </BlockConnector>
    <BlockConnector label="functionName" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="functionName"/>
    </BlockConnector>
    <BlockConnector label="errorNumber" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="errorNumber"/>
    </BlockConnector>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="message"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="component/argument"/>
    <LangSpecProperty key="socket-allow-2" value="functionName/argument"/>
    <LangSpecProperty key="socket-allow-3" value="errorNumber/argument"/>
    <LangSpecProperty key="socket-allow-4" value="message/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Screen-Initialize" initlabel="Initialize"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Screen starting</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Screen-OtherScreenClosed" initlabel="OtherScreenClosed"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event raised when another screen has closed and control has returned to this screen.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="otherScreenName" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="otherScreenName"/>
    </BlockConnector>
    <BlockConnector label="result" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="result"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="otherScreenName/argument"/>
    <LangSpecProperty key="socket-allow-2" value="result/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Screen-ScreenOrientationChanged" initlabel="ScreenOrientationChanged"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Screen orientation changed</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<!-- ListPicker Component -->

<BlockGenus name="ListPicker" initlabel="ListPicker"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A button that, when clicked on, displays a list of texts for the user to choose among. The texts can be specified through the Designer or Blocks Editor by setting the ElementsFromString property to their string-separated concatenation (for example, choice 1, choice 2, choice 3) or by setting the Elements property to a List in the Blocks editor. Setting property ShowFilterBar to true, will make the list searchable. Other properties affect the appearance of the button (TextAlignment, BackgroundColor, etc.) and whether it can be clicked on (Enabled).</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="8"/>
    <LangSpecProperty key="ya-event-1" value="ListPicker-AfterPicking"/>
    <LangSpecProperty key="ya-event-2" value="ListPicker-BeforePicking"/>
    <LangSpecProperty key="ya-event-3" value="ListPicker-GotFocus"/>
    <LangSpecProperty key="ya-event-4" value="ListPicker-LostFocus"/>
    <LangSpecProperty key="ya-prop-1" value="BackgroundColor/read-write-property/number/Returns the button&apos;s background color"/>
    <LangSpecProperty key="ya-prop-2" value="Column/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-3" value="Elements/read-write-property/list/"/>
    <LangSpecProperty key="ya-prop-4" value="ElementsFromString/write-only-property/text/"/>
    <LangSpecProperty key="ya-prop-5" value="Enabled/read-write-property/boolean/"/>
    <LangSpecProperty key="ya-prop-6" value="FontBold/invisible-property/boolean/"/>
    <LangSpecProperty key="ya-prop-7" value="FontItalic/invisible-property/boolean/"/>
    <LangSpecProperty key="ya-prop-8" value="FontSize/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-9" value="FontTypeface/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-10" value="Height/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-11" value="Image/read-write-property/text/Specifies the path of the button&apos;s image. If there is both an Image and a BackgroundColor, only the Image will be visible."/>
    <LangSpecProperty key="ya-prop-12" value="Row/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-13" value="Selection/read-write-property/text/The selected item. When directly changed by the programmer, the SelectionIndex property is also changed to the first item in the ListPicker with the given value. If the value does not appear, SelectionIndex will be set to 0."/>
    <LangSpecProperty key="ya-prop-14" value="SelectionIndex/read-write-property/number/The index of the currently selected item, starting at 1. If no item is selected, the value will be 0. If an attempt is made to set this to a number less than 1 or greater than the number of items in the ListPicker, SelectionIndex will be set to 0, and Selection will be set to the empty text."/>
    <LangSpecProperty key="ya-prop-15" value="Shape/invisible-property/number/Specifies the button&apos;s shape (default, rounded, rectangular, oval). The shape will not be visible if an Image is being displayed."/>
    <LangSpecProperty key="ya-prop-16" value="ShowFeedback/read-write-property/boolean/Specifies if a visual feedback should be shown for a button that as an image as background."/>
    <LangSpecProperty key="ya-prop-17" value="ShowFilterBar/read-write-property/boolean/Returns current state of ShowFilterBar indicating if Search Filter Bar will be displayed on ListPicker or not"/>
    <LangSpecProperty key="ya-prop-18" value="Text/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-19" value="TextAlignment/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-20" value="TextColor/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-21" value="Title/read-write-property/text/Optional title displayed at the top of the list of choices."/>
    <LangSpecProperty key="ya-prop-22" value="Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."/>
    <LangSpecProperty key="ya-prop-23" value="Width/read-write-property/number/"/>
    <LangSpecProperty key="ya-method-1" value="ListPicker-Open"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-ListPicker-Open"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="ListPicker-AfterPicking" initlabel="AfterPicking"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event for AfterPicking</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="ListPicker-BeforePicking" initlabel="BeforePicking"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event for BeforePicking</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="ListPicker-GotFocus" initlabel="GotFocus"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event for GotFocus</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="ListPicker-LostFocus" initlabel="LostFocus"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event for LostFocus</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="ListPicker-Open" decorator="call" initlabel="Open"
            kind="command" color="call">
  <description>
    <text>Opens the picker, as though the user clicked on it.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-ListPicker-Open" decorator="call" initlabel="Open"
            kind="command" color="call">
  <description>
    <text>Opens the picker, as though the user clicked on it.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- ListView Component -->

<BlockGenus name="ListView" initlabel="ListView"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>This is a visible component that allows to place a list of text elements in your Screen to display. The list can be set using the ElementsFromString property or using the Elements block in the blocks editor.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="1"/>
    <LangSpecProperty key="ya-event-1" value="ListView-AfterPicking"/>
    <LangSpecProperty key="ya-event-2" value="ListView-BeforePicking"/>
    <LangSpecProperty key="ya-prop-1" value="Column/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-2" value="Elements/write-only-property/list/Set a list of text elements to build your list."/>
    <LangSpecProperty key="ya-prop-3" value="ElementsFromString/write-only-property/text/Build a list with a series of text elements separated by commas such as: Cheese,Fruit,Bacon,Radish. Each word before the comma will be an element in the list."/>
    <LangSpecProperty key="ya-prop-4" value="Height/read-write-property/number/Determines the height of the list on the view."/>
    <LangSpecProperty key="ya-prop-5" value="Row/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-6" value="Selection/read-only-property/text/Returns the text last selected in the ListView."/>
    <LangSpecProperty key="ya-prop-7" value="SelectionIndex/write-only-property/number/Choose a position to be your index. This could be used to retrieve the text at the position chosen in the list."/>
    <LangSpecProperty key="ya-prop-8" value="ShowFilterBar/read-write-property/boolean/Sets visibility of ShowFilterBar. True will show the bar, False will hide it."/>
    <LangSpecProperty key="ya-prop-9" value="Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."/>
    <LangSpecProperty key="ya-prop-10" value="Width/read-write-property/number/Determines the width of the list on the view."/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="ListView-AfterPicking" initlabel="AfterPicking"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Simple event to be raised after the an element has been chosen in the list. The selected element is available in the Selection property.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="ListView-BeforePicking" initlabel="BeforePicking"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Simple event to be raised right after an element has been chosen, but before assigning the element to the Selection property.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<!-- LocationSensor Component -->

<BlockGenus name="LocationSensor" initlabel="LocationSensor"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Non-visible component providing location information, including longitude, latitude, altitude (if supported by the device), and address. This can also perform &quot;geocoding&quot;, converting a given address (not necessarily the current one) to a latitude (with the LatitudeFromAddress method) and a longitude (with the LongitudeFromAddress method). In order to function, the component must have its Enabled property set to True, and the device must have location sensing enabled through either wireless networks or GPS satellites (if outside).</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="2"/>
    <LangSpecProperty key="ya-event-1" value="LocationSensor-LocationChanged"/>
    <LangSpecProperty key="ya-event-2" value="LocationSensor-StatusChanged"/>
    <LangSpecProperty key="ya-prop-1" value="Accuracy/read-only-property/number/"/>
    <LangSpecProperty key="ya-prop-2" value="Altitude/read-only-property/number/"/>
    <LangSpecProperty key="ya-prop-3" value="AvailableProviders/read-only-property/list/"/>
    <LangSpecProperty key="ya-prop-4" value="CurrentAddress/read-only-property/text/"/>
    <LangSpecProperty key="ya-prop-5" value="DistanceInterval/read-write-property/number/Determines the minimum distance interval, in meters, that the sensor will try to use for sending out location updates. For example, if this is set to 5, then the sensor will fire a LocationChanged event only after 5 meters have been traversed. However, the sensor does not guarantee that an update will be received at exactly the distance interval. It may take more than 5 meters to fire an event, for instance."/>
    <LangSpecProperty key="ya-prop-6" value="Enabled/read-write-property/boolean/"/>
    <LangSpecProperty key="ya-prop-7" value="HasAccuracy/read-only-property/boolean/"/>
    <LangSpecProperty key="ya-prop-8" value="HasAltitude/read-only-property/boolean/"/>
    <LangSpecProperty key="ya-prop-9" value="HasLongitudeLatitude/read-only-property/boolean/"/>
    <LangSpecProperty key="ya-prop-10" value="Latitude/read-only-property/number/"/>
    <LangSpecProperty key="ya-prop-11" value="Longitude/read-only-property/number/"/>
    <LangSpecProperty key="ya-prop-12" value="ProviderLocked/read-write-property/boolean/"/>
    <LangSpecProperty key="ya-prop-13" value="ProviderName/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-14" value="TimeInterval/read-write-property/number/Determines the minimum time interval, in milliseconds, that the sensor will try to use for sending out location updates. However, location updates will only be received when the location of the phone actually changes, and use of the specified time interval is not guaranteed. For example, if 1000 is used as the time interval, location updates will never be fired sooner than 1000ms, but they may be fired anytime after."/>
    <LangSpecProperty key="ya-method-1" value="LocationSensor-LatitudeFromAddress"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-LocationSensor-LatitudeFromAddress"/>
    <LangSpecProperty key="ya-method-2" value="LocationSensor-LongitudeFromAddress"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-LocationSensor-LongitudeFromAddress"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="LocationSensor-LocationChanged" initlabel="LocationChanged"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that a new location has been detected.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="latitude" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="latitude"/>
    </BlockConnector>
    <BlockConnector label="longitude" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="longitude"/>
    </BlockConnector>
    <BlockConnector label="altitude" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="altitude"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="latitude/argument"/>
    <LangSpecProperty key="socket-allow-2" value="longitude/argument"/>
    <LangSpecProperty key="socket-allow-3" value="altitude/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="LocationSensor-StatusChanged" initlabel="StatusChanged"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that the status of the provider has changed.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="provider" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="provider"/>
    </BlockConnector>
    <BlockConnector label="status" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="status"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="provider/argument"/>
    <LangSpecProperty key="socket-allow-2" value="status/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="LocationSensor-LatitudeFromAddress" decorator="call" initlabel="LatitudeFromAddress"
            kind="function" color="call">
  <description>
    <text>Derives latitude of given address</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="locationName" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="locationName/value"/>
    <LangSpecProperty key="socket-allow-2" value="locationName/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-LocationSensor-LatitudeFromAddress" decorator="call" initlabel="LatitudeFromAddress"
            kind="function" color="call">
  <description>
    <text>Derives latitude of given address</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="locationName" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="locationName/value"/>
    <LangSpecProperty key="socket-allow-4" value="locationName/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="LocationSensor-LongitudeFromAddress" decorator="call" initlabel="LongitudeFromAddress"
            kind="function" color="call">
  <description>
    <text>Derives longitude of given address</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="locationName" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="locationName/value"/>
    <LangSpecProperty key="socket-allow-2" value="locationName/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-LocationSensor-LongitudeFromAddress" decorator="call" initlabel="LongitudeFromAddress"
            kind="function" color="call">
  <description>
    <text>Derives longitude of given address</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="locationName" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="locationName/value"/>
    <LangSpecProperty key="socket-allow-4" value="locationName/text"/>
  </LangSpecProperties>
</BlockGenus>

<!-- Notifier Component -->

<BlockGenus name="Notifier" initlabel="Notifier"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>The Notifier component displays alert dialogs, messages, and temporary alerts, and creates Android log entries through the following methods: - ShowMessageDialog: displays a message which the user must dismiss by pressing a button. - ShowChooseDialog: displays a message two buttons to let the user choose one of two responses, for example, yes or no, after which the AfterChoosing event is raised. - ShowTextDialog: lets the user enter text in response to the message, after which the AfterTextInput event is raised. - ShowAlert: displays a temporary alert that goes away by itself after a short time. - LogError: logs an error message to the Android log. - LogInfo: logs an info message to the Android log. - LogWarning: logs a warning message to the Android log. - The messages in the dialogs (but not the alert) can be formatted using the following HTML tags:&lt;b&gt;, &lt;big&gt;, &lt;blockquote&gt;, &lt;br&gt;, &lt;cite&gt;, &lt;dfn&gt;, &lt;div&gt;, &lt;em&gt;, &lt;small&gt;, &lt;strong&gt;, &lt;sub&gt;, &lt;sup&gt;, &lt;tt&gt;. &lt;u&gt; - You can also use the font tag to specify color, for example, &lt;font color=&quot;blue&quot;&gt;. Some of the available color names are aqua, black, blue, fuchsia, green, grey, lime, maroon, navy, olive, purple, red, silver, teal, white, and yellow</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="3"/>
    <LangSpecProperty key="ya-event-1" value="Notifier-AfterChoosing"/>
    <LangSpecProperty key="ya-event-2" value="Notifier-AfterTextInput"/>
    <LangSpecProperty key="ya-prop-1" value="BackgroundColor/write-only-property/number/Specifies the background color for alerts (not dialogs)."/>
    <LangSpecProperty key="ya-prop-2" value="NotifierLength/invisible-property/number/specifies the length of time that the alert is shown -- either &quot;short&quot; or &quot;long&quot;."/>
    <LangSpecProperty key="ya-prop-3" value="TextColor/read-write-property/number/Specifies the text color for alerts (not dialogs)."/>
    <LangSpecProperty key="ya-method-1" value="Notifier-LogError"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-Notifier-LogError"/>
    <LangSpecProperty key="ya-method-2" value="Notifier-LogInfo"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-Notifier-LogInfo"/>
    <LangSpecProperty key="ya-method-3" value="Notifier-LogWarning"/>
    <LangSpecProperty key="ya-type-method-3" value="Type-Notifier-LogWarning"/>
    <LangSpecProperty key="ya-method-4" value="Notifier-ShowAlert"/>
    <LangSpecProperty key="ya-type-method-4" value="Type-Notifier-ShowAlert"/>
    <LangSpecProperty key="ya-method-5" value="Notifier-ShowChooseDialog"/>
    <LangSpecProperty key="ya-type-method-5" value="Type-Notifier-ShowChooseDialog"/>
    <LangSpecProperty key="ya-method-6" value="Notifier-ShowMessageDialog"/>
    <LangSpecProperty key="ya-type-method-6" value="Type-Notifier-ShowMessageDialog"/>
    <LangSpecProperty key="ya-method-7" value="Notifier-ShowTextDialog"/>
    <LangSpecProperty key="ya-type-method-7" value="Type-Notifier-ShowTextDialog"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="Notifier-AfterChoosing" initlabel="AfterChoosing"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event after the user has made a selection for ShowChooseDialog.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="choice" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="choice"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="choice/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Notifier-AfterTextInput" initlabel="AfterTextInput"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event raised after the user has responded to ShowTextDialog.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="response" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="response"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="response/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="Notifier-LogError" decorator="call" initlabel="LogError"
            kind="command" color="call">
  <description>
    <text>Writes an error message to the Android system log. See the Google Android documentation for how to access the log.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="message/value"/>
    <LangSpecProperty key="socket-allow-2" value="message/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Notifier-LogError" decorator="call" initlabel="LogError"
            kind="command" color="call">
  <description>
    <text>Writes an error message to the Android system log. See the Google Android documentation for how to access the log.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="message/value"/>
    <LangSpecProperty key="socket-allow-4" value="message/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Notifier-LogInfo" decorator="call" initlabel="LogInfo"
            kind="command" color="call">
  <description>
    <text>Writes an information message to the Android log.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="message/value"/>
    <LangSpecProperty key="socket-allow-2" value="message/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Notifier-LogInfo" decorator="call" initlabel="LogInfo"
            kind="command" color="call">
  <description>
    <text>Writes an information message to the Android log.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="message/value"/>
    <LangSpecProperty key="socket-allow-4" value="message/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Notifier-LogWarning" decorator="call" initlabel="LogWarning"
            kind="command" color="call">
  <description>
    <text>Writes a warning message to the Android log. See the Google Android documentation for how to access the log.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="message/value"/>
    <LangSpecProperty key="socket-allow-2" value="message/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Notifier-LogWarning" decorator="call" initlabel="LogWarning"
            kind="command" color="call">
  <description>
    <text>Writes a warning message to the Android log. See the Google Android documentation for how to access the log.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="message/value"/>
    <LangSpecProperty key="socket-allow-4" value="message/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Notifier-ShowAlert" decorator="call" initlabel="ShowAlert"
            kind="command" color="call">
  <description>
    <text>Display a temporary notification</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="notice" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="notice/value"/>
    <LangSpecProperty key="socket-allow-2" value="notice/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Notifier-ShowAlert" decorator="call" initlabel="ShowAlert"
            kind="command" color="call">
  <description>
    <text>Display a temporary notification</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="notice" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="notice/value"/>
    <LangSpecProperty key="socket-allow-4" value="notice/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Notifier-ShowChooseDialog" decorator="call" initlabel="ShowChooseDialog"
            kind="command" color="call">
  <description>
    <text>Shows a dialog box with two buttons, from which the user can choose. If cancelable is true there will be an additional CANCEL button. Pressing a button will raise the AfterChoosing event. The &quot;choice&quot; parameter to AfterChoosing will be the text on the button that was pressed, or &quot;Cancel&quot; if the CANCEL button was pressed.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="title" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="button1Text" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="button2Text" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="cancelable" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="message/value"/>
    <LangSpecProperty key="socket-allow-2" value="title/value"/>
    <LangSpecProperty key="socket-allow-3" value="button1Text/value"/>
    <LangSpecProperty key="socket-allow-4" value="button2Text/value"/>
    <LangSpecProperty key="socket-allow-5" value="cancelable/value"/>
    <LangSpecProperty key="socket-allow-6" value="message/text"/>
    <LangSpecProperty key="socket-allow-7" value="title/text"/>
    <LangSpecProperty key="socket-allow-8" value="button1Text/text"/>
    <LangSpecProperty key="socket-allow-9" value="button2Text/text"/>
    <LangSpecProperty key="socket-allow-10" value="cancelable/boolean"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Notifier-ShowChooseDialog" decorator="call" initlabel="ShowChooseDialog"
            kind="command" color="call">
  <description>
    <text>Shows a dialog box with two buttons, from which the user can choose. If cancelable is true there will be an additional CANCEL button. Pressing a button will raise the AfterChoosing event. The &quot;choice&quot; parameter to AfterChoosing will be the text on the button that was pressed, or &quot;Cancel&quot; if the CANCEL button was pressed.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="title" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="button1Text" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="button2Text" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="cancelable" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="message/value"/>
    <LangSpecProperty key="socket-allow-4" value="title/value"/>
    <LangSpecProperty key="socket-allow-5" value="button1Text/value"/>
    <LangSpecProperty key="socket-allow-6" value="button2Text/value"/>
    <LangSpecProperty key="socket-allow-7" value="cancelable/value"/>
    <LangSpecProperty key="socket-allow-8" value="message/text"/>
    <LangSpecProperty key="socket-allow-9" value="title/text"/>
    <LangSpecProperty key="socket-allow-10" value="button1Text/text"/>
    <LangSpecProperty key="socket-allow-11" value="button2Text/text"/>
    <LangSpecProperty key="socket-allow-12" value="cancelable/boolean"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Notifier-ShowMessageDialog" decorator="call" initlabel="ShowMessageDialog"
            kind="command" color="call">
  <description>
    <text>Display an alert dialog with a single button that dismisses the alert.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="title" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="buttonText" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="message/value"/>
    <LangSpecProperty key="socket-allow-2" value="title/value"/>
    <LangSpecProperty key="socket-allow-3" value="buttonText/value"/>
    <LangSpecProperty key="socket-allow-4" value="message/text"/>
    <LangSpecProperty key="socket-allow-5" value="title/text"/>
    <LangSpecProperty key="socket-allow-6" value="buttonText/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Notifier-ShowMessageDialog" decorator="call" initlabel="ShowMessageDialog"
            kind="command" color="call">
  <description>
    <text>Display an alert dialog with a single button that dismisses the alert.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="title" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="buttonText" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="message/value"/>
    <LangSpecProperty key="socket-allow-4" value="title/value"/>
    <LangSpecProperty key="socket-allow-5" value="buttonText/value"/>
    <LangSpecProperty key="socket-allow-6" value="message/text"/>
    <LangSpecProperty key="socket-allow-7" value="title/text"/>
    <LangSpecProperty key="socket-allow-8" value="buttonText/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Notifier-ShowTextDialog" decorator="call" initlabel="ShowTextDialog"
            kind="command" color="call">
  <description>
    <text>Shows a dialog box where the user can enter text, after which the AfterTextInput event will be raised. If cancelable is true there will be an additional CANCEL button. Entering text will raise the AfterTextInput event. The &quot;response&quot; parameter to AfterTextInput will be the text that was entered, or &quot;Cancel&quot; if the CANCEL button was pressed.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="title" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="cancelable" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="message/value"/>
    <LangSpecProperty key="socket-allow-2" value="title/value"/>
    <LangSpecProperty key="socket-allow-3" value="cancelable/value"/>
    <LangSpecProperty key="socket-allow-4" value="message/text"/>
    <LangSpecProperty key="socket-allow-5" value="title/text"/>
    <LangSpecProperty key="socket-allow-6" value="cancelable/boolean"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Notifier-ShowTextDialog" decorator="call" initlabel="ShowTextDialog"
            kind="command" color="call">
  <description>
    <text>Shows a dialog box where the user can enter text, after which the AfterTextInput event will be raised. If cancelable is true there will be an additional CANCEL button. Entering text will raise the AfterTextInput event. The &quot;response&quot; parameter to AfterTextInput will be the text that was entered, or &quot;Cancel&quot; if the CANCEL button was pressed.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="title" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="cancelable" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="message/value"/>
    <LangSpecProperty key="socket-allow-4" value="title/value"/>
    <LangSpecProperty key="socket-allow-5" value="cancelable/value"/>
    <LangSpecProperty key="socket-allow-6" value="message/text"/>
    <LangSpecProperty key="socket-allow-7" value="title/text"/>
    <LangSpecProperty key="socket-allow-8" value="cancelable/boolean"/>
  </LangSpecProperties>
</BlockGenus>

<!-- PhoneStatus Component -->

<BlockGenus name="PhoneStatus" initlabel="PhoneStatus"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Component that returns information about the phone.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="1"/>
    <LangSpecProperty key="ya-method-1" value="PhoneStatus-GetWifiIpAddress"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-PhoneStatus-GetWifiIpAddress"/>
    <LangSpecProperty key="ya-method-2" value="PhoneStatus-doFault"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-PhoneStatus-doFault"/>
    <LangSpecProperty key="ya-method-3" value="PhoneStatus-getVersionName"/>
    <LangSpecProperty key="ya-type-method-3" value="Type-PhoneStatus-getVersionName"/>
    <LangSpecProperty key="ya-method-4" value="PhoneStatus-installURL"/>
    <LangSpecProperty key="ya-type-method-4" value="Type-PhoneStatus-installURL"/>
    <LangSpecProperty key="ya-method-5" value="PhoneStatus-isConnected"/>
    <LangSpecProperty key="ya-type-method-5" value="Type-PhoneStatus-isConnected"/>
    <LangSpecProperty key="ya-method-6" value="PhoneStatus-isDirect"/>
    <LangSpecProperty key="ya-type-method-6" value="Type-PhoneStatus-isDirect"/>
    <LangSpecProperty key="ya-method-7" value="PhoneStatus-setAssetsLoaded"/>
    <LangSpecProperty key="ya-type-method-7" value="Type-PhoneStatus-setAssetsLoaded"/>
    <LangSpecProperty key="ya-method-8" value="PhoneStatus-setHmacSeedReturnCode"/>
    <LangSpecProperty key="ya-type-method-8" value="Type-PhoneStatus-setHmacSeedReturnCode"/>
    <LangSpecProperty key="ya-method-9" value="PhoneStatus-shutdown"/>
    <LangSpecProperty key="ya-type-method-9" value="Type-PhoneStatus-shutdown"/>
    <LangSpecProperty key="ya-method-10" value="PhoneStatus-startHTTPD"/>
    <LangSpecProperty key="ya-type-method-10" value="Type-PhoneStatus-startHTTPD"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="PhoneStatus-GetWifiIpAddress" decorator="call" initlabel="GetWifiIpAddress"
            kind="function" color="call">
  <description>
    <text>Returns the IP address of the phone in the form of a String</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-PhoneStatus-GetWifiIpAddress" decorator="call" initlabel="GetWifiIpAddress"
            kind="function" color="call">
  <description>
    <text>Returns the IP address of the phone in the form of a String</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="PhoneStatus-doFault" decorator="call" initlabel="doFault"
            kind="command" color="call">
  <description>
    <text>Causes an Exception, used to debug exception processing.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-PhoneStatus-doFault" decorator="call" initlabel="doFault"
            kind="command" color="call">
  <description>
    <text>Causes an Exception, used to debug exception processing.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="PhoneStatus-getVersionName" decorator="call" initlabel="getVersionName"
            kind="function" color="call">
  <description>
    <text>Obtain the Android Application Version</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-PhoneStatus-getVersionName" decorator="call" initlabel="getVersionName"
            kind="function" color="call">
  <description>
    <text>Obtain the Android Application Version</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="PhoneStatus-installURL" decorator="call" initlabel="installURL"
            kind="command" color="call">
  <description>
    <text>Downloads the URL and installs it as an Android Package</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="url" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="url/value"/>
    <LangSpecProperty key="socket-allow-2" value="url/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-PhoneStatus-installURL" decorator="call" initlabel="installURL"
            kind="command" color="call">
  <description>
    <text>Downloads the URL and installs it as an Android Package</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="url" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="url/value"/>
    <LangSpecProperty key="socket-allow-4" value="url/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="PhoneStatus-isConnected" decorator="call" initlabel="isConnected"
            kind="function" color="call">
  <description>
    <text>Returns TRUE if the phone is on Wifi, FALSE otherwise</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="boolean"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-PhoneStatus-isConnected" decorator="call" initlabel="isConnected"
            kind="function" color="call">
  <description>
    <text>Returns TRUE if the phone is on Wifi, FALSE otherwise</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="boolean"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="PhoneStatus-isDirect" decorator="call" initlabel="isDirect"
            kind="function" color="call">
  <description>
    <text>Returns true if we are running in the emulator or USB Connection</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="boolean"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-PhoneStatus-isDirect" decorator="call" initlabel="isDirect"
            kind="function" color="call">
  <description>
    <text>Returns true if we are running in the emulator or USB Connection</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="boolean"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="PhoneStatus-setAssetsLoaded" decorator="call" initlabel="setAssetsLoaded"
            kind="command" color="call">
  <description>
    <text>Declare that we have loaded our initial assets and other assets should come from the sdcard</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-PhoneStatus-setAssetsLoaded" decorator="call" initlabel="setAssetsLoaded"
            kind="command" color="call">
  <description>
    <text>Declare that we have loaded our initial assets and other assets should come from the sdcard</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="PhoneStatus-setHmacSeedReturnCode" decorator="call" initlabel="setHmacSeedReturnCode"
            kind="function" color="call">
  <description>
    <text>Establish the secret seed for HOTP generation. Return the SHA1 of the provided seed, this will be used to contact the rendezvous server.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="seed" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="seed/value"/>
    <LangSpecProperty key="socket-allow-2" value="seed/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-PhoneStatus-setHmacSeedReturnCode" decorator="call" initlabel="setHmacSeedReturnCode"
            kind="function" color="call">
  <description>
    <text>Establish the secret seed for HOTP generation. Return the SHA1 of the provided seed, this will be used to contact the rendezvous server.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="seed" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="seed/value"/>
    <LangSpecProperty key="socket-allow-4" value="seed/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="PhoneStatus-shutdown" decorator="call" initlabel="shutdown"
            kind="command" color="call">
  <description>
    <text>Really Exit the Application</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-PhoneStatus-shutdown" decorator="call" initlabel="shutdown"
            kind="command" color="call">
  <description>
    <text>Really Exit the Application</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="PhoneStatus-startHTTPD" decorator="call" initlabel="startHTTPD"
            kind="command" color="call">
  <description>
    <text>Start the internal AppInvHTTPD to listen for incoming forms. FOR REPL USE ONLY!</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="secure" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="secure/value"/>
    <LangSpecProperty key="socket-allow-2" value="secure/boolean"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-PhoneStatus-startHTTPD" decorator="call" initlabel="startHTTPD"
            kind="command" color="call">
  <description>
    <text>Start the internal AppInvHTTPD to listen for incoming forms. FOR REPL USE ONLY!</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="secure" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="secure/value"/>
    <LangSpecProperty key="socket-allow-4" value="secure/boolean"/>
  </LangSpecProperties>
</BlockGenus>

<!-- Player Component -->

<BlockGenus name="Player" initlabel="Player"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Multimedia component that plays audio and controls phone vibration. The name of a multimedia field is specified in the Source property, which can be set in the Designer or in the Blocks Editor. The length of time for a vibration is specified in the Blocks Editor in milliseconds (thousandths of a second). For supported audio formats, see Android Supported Media Formats. This component is best for long sound files, such as songs, while the Sound component is more efficient for short files, such as sound effects.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="5"/>
    <LangSpecProperty key="ya-event-1" value="Player-Completed"/>
    <LangSpecProperty key="ya-prop-1" value="IsPlaying/read-only-property/boolean/Reports whether the media is playing"/>
    <LangSpecProperty key="ya-prop-2" value="Loop/read-write-property/boolean/If true, the player will loop when it plays. Setting Loop while the player is playing will affect the current playing."/>
    <LangSpecProperty key="ya-prop-3" value="Source/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-4" value="Volume/write-only-property/number/Sets the volume to a number between 0 and 100"/>
    <LangSpecProperty key="ya-method-1" value="Player-Pause"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-Player-Pause"/>
    <LangSpecProperty key="ya-method-2" value="Player-Start"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-Player-Start"/>
    <LangSpecProperty key="ya-method-3" value="Player-Stop"/>
    <LangSpecProperty key="ya-type-method-3" value="Type-Player-Stop"/>
    <LangSpecProperty key="ya-method-4" value="Player-Vibrate"/>
    <LangSpecProperty key="ya-type-method-4" value="Type-Player-Vibrate"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="Player-Completed" initlabel="Completed"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that the media has reached the end</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Player-PlayerError" initlabel="PlayerError"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>The PlayerError event is no longer used. Please use the Screen.ErrorOccurred event instead.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="message"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="message/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="Player-Pause" decorator="call" initlabel="Pause"
            kind="command" color="call">
  <description>
    <text>Suspends playing the media if it is playing.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Player-Pause" decorator="call" initlabel="Pause"
            kind="command" color="call">
  <description>
    <text>Suspends playing the media if it is playing.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Player-Start" decorator="call" initlabel="Start"
            kind="command" color="call">
  <description>
    <text>Plays the media. If it was previously paused, the playing is resumed. If it was previously stopped, it starts from the beginning.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Player-Start" decorator="call" initlabel="Start"
            kind="command" color="call">
  <description>
    <text>Plays the media. If it was previously paused, the playing is resumed. If it was previously stopped, it starts from the beginning.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Player-Stop" decorator="call" initlabel="Stop"
            kind="command" color="call">
  <description>
    <text>Stops playing the media and seeks to the beginning of the song.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Player-Stop" decorator="call" initlabel="Stop"
            kind="command" color="call">
  <description>
    <text>Stops playing the media and seeks to the beginning of the song.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Player-Vibrate" decorator="call" initlabel="Vibrate"
            kind="command" color="call">
  <description>
    <text>Vibrates for specified number of milliseconds.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="milliseconds" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="milliseconds/value"/>
    <LangSpecProperty key="socket-allow-2" value="milliseconds/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Player-Vibrate" decorator="call" initlabel="Vibrate"
            kind="command" color="call">
  <description>
    <text>Vibrates for specified number of milliseconds.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="milliseconds" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="milliseconds/value"/>
    <LangSpecProperty key="socket-allow-4" value="milliseconds/number"/>
  </LangSpecProperties>
</BlockGenus>

<!-- Sharing Component -->

<BlockGenus name="Sharing" initlabel="Sharing"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Sharing is a non-visible component that enables sharing files and/or messages between your app and other apps installed on a device. The component will display a list of the installed apps that can handle the information provided, and will allow the user to choose one to share the content with, for instance a mail app, a social network app, a texting app, and so on.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="1"/>
    <LangSpecProperty key="ya-method-1" value="Sharing-ShareFile"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-Sharing-ShareFile"/>
    <LangSpecProperty key="ya-method-2" value="Sharing-ShareFileWithMessage"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-Sharing-ShareFileWithMessage"/>
    <LangSpecProperty key="ya-method-3" value="Sharing-ShareMessage"/>
    <LangSpecProperty key="ya-type-method-3" value="Type-Sharing-ShareMessage"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="Sharing-ShareFile" decorator="call" initlabel="ShareFile"
            kind="command" color="call">
  <description>
    <text>Shares a file through any capable application installed on the phone by displaying a list of the available apps and allowing the user to choose one from the list. The selected app will open with the file inserted on it.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="file" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="file/value"/>
    <LangSpecProperty key="socket-allow-2" value="file/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Sharing-ShareFile" decorator="call" initlabel="ShareFile"
            kind="command" color="call">
  <description>
    <text>Shares a file through any capable application installed on the phone by displaying a list of the available apps and allowing the user to choose one from the list. The selected app will open with the file inserted on it.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="file" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="file/value"/>
    <LangSpecProperty key="socket-allow-4" value="file/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Sharing-ShareFileWithMessage" decorator="call" initlabel="ShareFileWithMessage"
            kind="command" color="call">
  <description>
    <text>Shares both a file and a message through any capable application installed on the phone by displaying a list of available apps and allowing the user to choose one from the list. The selected app will open with the file and message inserted on it.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="file" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="file/value"/>
    <LangSpecProperty key="socket-allow-2" value="message/value"/>
    <LangSpecProperty key="socket-allow-3" value="file/text"/>
    <LangSpecProperty key="socket-allow-4" value="message/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Sharing-ShareFileWithMessage" decorator="call" initlabel="ShareFileWithMessage"
            kind="command" color="call">
  <description>
    <text>Shares both a file and a message through any capable application installed on the phone by displaying a list of available apps and allowing the user to choose one from the list. The selected app will open with the file and message inserted on it.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="file" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="file/value"/>
    <LangSpecProperty key="socket-allow-4" value="message/value"/>
    <LangSpecProperty key="socket-allow-5" value="file/text"/>
    <LangSpecProperty key="socket-allow-6" value="message/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Sharing-ShareMessage" decorator="call" initlabel="ShareMessage"
            kind="command" color="call">
  <description>
    <text>Shares a message through any capable application installed on the phone by displaying a list of the available apps and allowing the user to choose one from the list. The selected app will open with the message inserted on it.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="message/value"/>
    <LangSpecProperty key="socket-allow-2" value="message/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Sharing-ShareMessage" decorator="call" initlabel="ShareMessage"
            kind="command" color="call">
  <description>
    <text>Shares a message through any capable application installed on the phone by displaying a list of the available apps and allowing the user to choose one from the list. The selected app will open with the message inserted on it.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="message/value"/>
    <LangSpecProperty key="socket-allow-4" value="message/text"/>
  </LangSpecProperties>
</BlockGenus>

<!-- Sound Component -->

<BlockGenus name="Sound" initlabel="Sound"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A multimedia component that plays sound files and optionally vibrates for the number of milliseconds (thousandths of a second) specified in the Blocks Editor. The name of the sound file to play can be specified either in the Designer or in the Blocks Editor. For supported sound file formats, see Android Supported Media Formats. This Sound component is best for short sound files, such as sound effects, while the Player component is more efficient for longer sounds, such as songs.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="3"/>
    <LangSpecProperty key="ya-prop-1" value="MinimumInterval/read-write-property/number/The minimum interval between sounds. If you play a sound, all further Play() calls will be ignored until the interval has elapsed."/>
    <LangSpecProperty key="ya-prop-2" value="Source/read-write-property/text/The name of the sound file. Only certain formats are supported. See http://developer.android.com/guide/appendix/media-formats.html."/>
    <LangSpecProperty key="ya-method-1" value="Sound-Pause"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-Sound-Pause"/>
    <LangSpecProperty key="ya-method-2" value="Sound-Play"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-Sound-Play"/>
    <LangSpecProperty key="ya-method-3" value="Sound-Resume"/>
    <LangSpecProperty key="ya-type-method-3" value="Type-Sound-Resume"/>
    <LangSpecProperty key="ya-method-4" value="Sound-Stop"/>
    <LangSpecProperty key="ya-type-method-4" value="Type-Sound-Stop"/>
    <LangSpecProperty key="ya-method-5" value="Sound-Vibrate"/>
    <LangSpecProperty key="ya-type-method-5" value="Type-Sound-Vibrate"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="Sound-SoundError" initlabel="SoundError"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>The SoundError event is no longer used. Please use the Screen.ErrorOccurred event instead.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="message"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="message/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="Sound-Pause" decorator="call" initlabel="Pause"
            kind="command" color="call">
  <description>
    <text>Pauses playing the sound if it is being played.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Sound-Pause" decorator="call" initlabel="Pause"
            kind="command" color="call">
  <description>
    <text>Pauses playing the sound if it is being played.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Sound-Play" decorator="call" initlabel="Play"
            kind="command" color="call">
  <description>
    <text>Plays the sound.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Sound-Play" decorator="call" initlabel="Play"
            kind="command" color="call">
  <description>
    <text>Plays the sound.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Sound-Resume" decorator="call" initlabel="Resume"
            kind="command" color="call">
  <description>
    <text>Resumes playing the sound after a pause.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Sound-Resume" decorator="call" initlabel="Resume"
            kind="command" color="call">
  <description>
    <text>Resumes playing the sound after a pause.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Sound-Stop" decorator="call" initlabel="Stop"
            kind="command" color="call">
  <description>
    <text>Stops playing the sound if it is being played.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Sound-Stop" decorator="call" initlabel="Stop"
            kind="command" color="call">
  <description>
    <text>Stops playing the sound if it is being played.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Sound-Vibrate" decorator="call" initlabel="Vibrate"
            kind="command" color="call">
  <description>
    <text>Vibrates for the specified number of milliseconds.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="millisecs" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="millisecs/value"/>
    <LangSpecProperty key="socket-allow-2" value="millisecs/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Sound-Vibrate" decorator="call" initlabel="Vibrate"
            kind="command" color="call">
  <description>
    <text>Vibrates for the specified number of milliseconds.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="millisecs" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="millisecs/value"/>
    <LangSpecProperty key="socket-allow-4" value="millisecs/number"/>
  </LangSpecProperties>
</BlockGenus>

<!-- Spinner Component -->

<BlockGenus name="Spinner" initlabel="Spinner"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A spinner component that displays a pop-up with a list of elements. These elements can be set in the Designer or Blocks Editor by setting theElementsFromString property to a string-separated concatenation (for example, choice 1, choice 2, choice 3) or by setting the Elements property to a List in the Blocks editor.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="1"/>
    <LangSpecProperty key="ya-event-1" value="Spinner-AfterSelecting"/>
    <LangSpecProperty key="ya-prop-1" value="Column/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-2" value="Elements/read-write-property/list/returns a list of text elements to be picked from."/>
    <LangSpecProperty key="ya-prop-3" value="ElementsFromString/write-only-property/text/sets the Spinner list to the elements passed in the comma-separated string"/>
    <LangSpecProperty key="ya-prop-4" value="Height/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-5" value="Prompt/read-write-property/text/Text with the current title for the Spinner window"/>
    <LangSpecProperty key="ya-prop-6" value="Row/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-7" value="Selection/read-write-property/text/Returns the current selected item in the spinner"/>
    <LangSpecProperty key="ya-prop-8" value="SelectionIndex/read-write-property/number/The index of the currently selected item, starting at 1. If no item is selected, the value will be 0."/>
    <LangSpecProperty key="ya-prop-9" value="Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."/>
    <LangSpecProperty key="ya-prop-10" value="Width/read-write-property/number/"/>
    <LangSpecProperty key="ya-method-1" value="Spinner-DisplayDropdown"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-Spinner-DisplayDropdown"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="Spinner-AfterSelecting" initlabel="AfterSelecting"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event called after the user selects an item from the dropdown list.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="selection" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="selection"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="selection/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="Spinner-DisplayDropdown" decorator="call" initlabel="DisplayDropdown"
            kind="command" color="call">
  <description>
    <text>displays the dropdown list for selection, same action as when the user clicks on the spinner.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Spinner-DisplayDropdown" decorator="call" initlabel="DisplayDropdown"
            kind="command" color="call">
  <description>
    <text>displays the dropdown list for selection, same action as when the user clicks on the spinner.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- TextToSpeech Component -->

<BlockGenus name="TextToSpeech" initlabel="TextToSpeech"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Component for using TextToSpeech to speak a message</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="2"/>
    <LangSpecProperty key="ya-event-1" value="TextToSpeech-AfterSpeaking"/>
    <LangSpecProperty key="ya-event-2" value="TextToSpeech-BeforeSpeaking"/>
    <LangSpecProperty key="ya-prop-1" value="Country/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-2" value="Language/read-write-property/text/Sets the language for TextToSpeech"/>
    <LangSpecProperty key="ya-prop-3" value="Pitch/read-write-property/number/Sets the Pitch for tts. The values should be between 0 and 2 where lower values lower the tone of synthesized voice and greater values increases it"/>
    <LangSpecProperty key="ya-prop-4" value="Result/read-only-property/boolean/"/>
    <LangSpecProperty key="ya-prop-5" value="SpeechRate/read-write-property/number/Sets the SpeechRate for tts. The values should be between 0 and 2 where lower values slow down the pitch and greater values accelerate it"/>
    <LangSpecProperty key="ya-method-1" value="TextToSpeech-Speak"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-TextToSpeech-Speak"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="TextToSpeech-AfterSpeaking" initlabel="AfterSpeaking"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event to raise after the message is spoken.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="result" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="result"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="result/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="TextToSpeech-BeforeSpeaking" initlabel="BeforeSpeaking"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event to raise when Speak is invoked, before the message is spoken.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="TextToSpeech-Speak" decorator="call" initlabel="Speak"
            kind="command" color="call">
  <description>
    <text>Speaks the given message.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="message/value"/>
    <LangSpecProperty key="socket-allow-2" value="message/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-TextToSpeech-Speak" decorator="call" initlabel="Speak"
            kind="command" color="call">
  <description>
    <text>Speaks the given message.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="message/value"/>
    <LangSpecProperty key="socket-allow-4" value="message/text"/>
  </LangSpecProperties>
</BlockGenus>

<!-- VideoPlayer Component -->

<BlockGenus name="VideoPlayer" initlabel="VideoPlayer"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A multimedia component capable of playing videos. When the application is run, the VideoPlayer will be displayed as a rectangle on-screen. If the user touches the rectangle, controls will appear to play/pause, skip ahead, and skip backward within the video. The application can also control behavior by calling the Start, Pause, and SeekTo methods. Video files should be in Windows Media Video (.wmv) format, 3GPP (.3gp), or MPEG-4 (.mp4). For more details about legal formats, see Android Supported Media Formats. App Inventor for Android only permits video files under 1 MB and limits the total size of an application to 5 MB, not all of which is available for media (video, audio, and sound) files. If your media files are too large, you may get errors when packaging or installing your application, in which case you should reduce the number of media files or their sizes. Most video editing software, such as Windows Movie Maker and Apple iMovie, can help you decrease the size of videos by shortening them or re-encoding the video into a more compact format. You can also set the media source to a URL that points to a streaming video, but the URL must point to the video file itself, not to a program that plays the video.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="5"/>
    <LangSpecProperty key="ya-event-1" value="VideoPlayer-Completed"/>
    <LangSpecProperty key="ya-prop-1" value="Column/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-2" value="FullScreen/read-write-property/boolean/"/>
    <LangSpecProperty key="ya-prop-3" value="Height/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-4" value="Row/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-5" value="Source/write-only-property/text/The &quot;path&quot; to the video. Usually, this will be the name of the video file, which should be added in the Designer."/>
    <LangSpecProperty key="ya-prop-6" value="Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."/>
    <LangSpecProperty key="ya-prop-7" value="Volume/write-only-property/number/Sets the volume to a number between 0 and 100. Values less than 0 will be treated as 0, and values greater than 100 will be treated as 100."/>
    <LangSpecProperty key="ya-prop-8" value="Width/read-write-property/number/"/>
    <LangSpecProperty key="ya-method-1" value="VideoPlayer-GetDuration"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-VideoPlayer-GetDuration"/>
    <LangSpecProperty key="ya-method-2" value="VideoPlayer-Pause"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-VideoPlayer-Pause"/>
    <LangSpecProperty key="ya-method-3" value="VideoPlayer-SeekTo"/>
    <LangSpecProperty key="ya-type-method-3" value="Type-VideoPlayer-SeekTo"/>
    <LangSpecProperty key="ya-method-4" value="VideoPlayer-Start"/>
    <LangSpecProperty key="ya-type-method-4" value="Type-VideoPlayer-Start"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="VideoPlayer-Completed" initlabel="Completed"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that the video has reached the end</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="VideoPlayer-VideoPlayerError" initlabel="VideoPlayerError"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>The VideoPlayerError event is no longer used. Please use the Screen.ErrorOccurred event instead.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="message"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="message/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="VideoPlayer-GetDuration" decorator="call" initlabel="GetDuration"
            kind="function" color="call">
  <description>
    <text>Returns duration of the video in milliseconds.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-VideoPlayer-GetDuration" decorator="call" initlabel="GetDuration"
            kind="function" color="call">
  <description>
    <text>Returns duration of the video in milliseconds.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="VideoPlayer-Pause" decorator="call" initlabel="Pause"
            kind="command" color="call">
  <description>
    <text>Pauses playback of the video. Playback can be resumed at the same location by calling the Start method.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-VideoPlayer-Pause" decorator="call" initlabel="Pause"
            kind="command" color="call">
  <description>
    <text>Pauses playback of the video. Playback can be resumed at the same location by calling the Start method.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="VideoPlayer-SeekTo" decorator="call" initlabel="SeekTo"
            kind="command" color="call">
  <description>
    <text>Seeks to the requested time (specified in milliseconds) in the video. Note that if the video is paused, the frame shown will not be updated by the seek.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="ms" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="ms/value"/>
    <LangSpecProperty key="socket-allow-2" value="ms/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-VideoPlayer-SeekTo" decorator="call" initlabel="SeekTo"
            kind="command" color="call">
  <description>
    <text>Seeks to the requested time (specified in milliseconds) in the video. Note that if the video is paused, the frame shown will not be updated by the seek.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="ms" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="ms/value"/>
    <LangSpecProperty key="socket-allow-4" value="ms/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="VideoPlayer-Start" decorator="call" initlabel="Start"
            kind="command" color="call">
  <description>
    <text>Starts playback of the video.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-VideoPlayer-Start" decorator="call" initlabel="Start"
            kind="command" color="call">
  <description>
    <text>Starts playback of the video.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- WebViewer Component -->

<BlockGenus name="WebViewer" initlabel="WebViewer"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Component for viewing Web pages. The Home URL can be specified in the Designer or in the Blocks Editor. The view can be set to follow links when they are tapped, and users can fill in Web forms. Warning: This is not a full browser. For example, pressing the phone&apos;s hardware Back key will exit the app, rather than move back in the browser history.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="4"/>
    <LangSpecProperty key="ya-prop-1" value="Column/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-2" value="CurrentPageTitle/read-only-property/text/Title of the page currently viewed"/>
    <LangSpecProperty key="ya-prop-3" value="CurrentUrl/read-only-property/text/URL of the page currently viewed. This could be different from the Home URL if new pages were visited by following links."/>
    <LangSpecProperty key="ya-prop-4" value="FollowLinks/read-write-property/boolean/Determines whether to follow links when they are tapped in the WebViewer. If you follow links, you can use GoBack and GoForward to navigate the browser history."/>
    <LangSpecProperty key="ya-prop-5" value="Height/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-6" value="HomeUrl/read-write-property/text/URL of the page the WebViewer should initially open to. Setting this will load the page."/>
    <LangSpecProperty key="ya-prop-7" value="PromptforPermission/read-write-property/boolean/If True, then prompt the user of the WebView to give permission to access the geolocation API. If False, then assume permission is granted."/>
    <LangSpecProperty key="ya-prop-8" value="Row/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-9" value="UsesLocation/invisible-property/boolean/Whether or not to give the application permission to use the Javascript geolocation API. This property is available only in the designer."/>
    <LangSpecProperty key="ya-prop-10" value="Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."/>
    <LangSpecProperty key="ya-prop-11" value="WebViewString/read-write-property/text/Gets the WebView&apos;s String, which is viewable through Javascript in the WebView as the window.AppInventor object"/>
    <LangSpecProperty key="ya-prop-12" value="Width/read-write-property/number/"/>
    <LangSpecProperty key="ya-method-1" value="WebViewer-CanGoBack"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-WebViewer-CanGoBack"/>
    <LangSpecProperty key="ya-method-2" value="WebViewer-CanGoForward"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-WebViewer-CanGoForward"/>
    <LangSpecProperty key="ya-method-3" value="WebViewer-ClearLocations"/>
    <LangSpecProperty key="ya-type-method-3" value="Type-WebViewer-ClearLocations"/>
    <LangSpecProperty key="ya-method-4" value="WebViewer-GoBack"/>
    <LangSpecProperty key="ya-type-method-4" value="Type-WebViewer-GoBack"/>
    <LangSpecProperty key="ya-method-5" value="WebViewer-GoForward"/>
    <LangSpecProperty key="ya-type-method-5" value="Type-WebViewer-GoForward"/>
    <LangSpecProperty key="ya-method-6" value="WebViewer-GoHome"/>
    <LangSpecProperty key="ya-type-method-6" value="Type-WebViewer-GoHome"/>
    <LangSpecProperty key="ya-method-7" value="WebViewer-GoToUrl"/>
    <LangSpecProperty key="ya-type-method-7" value="Type-WebViewer-GoToUrl"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="WebViewer-CanGoBack" decorator="call" initlabel="CanGoBack"
            kind="function" color="call">
  <description>
    <text>Returns true if the WebViewer can go back in the history list.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="boolean"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-WebViewer-CanGoBack" decorator="call" initlabel="CanGoBack"
            kind="function" color="call">
  <description>
    <text>Returns true if the WebViewer can go back in the history list.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="boolean"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="WebViewer-CanGoForward" decorator="call" initlabel="CanGoForward"
            kind="function" color="call">
  <description>
    <text>Returns true if the WebViewer can go forward in the history list.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="boolean"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-WebViewer-CanGoForward" decorator="call" initlabel="CanGoForward"
            kind="function" color="call">
  <description>
    <text>Returns true if the WebViewer can go forward in the history list.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="boolean"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="WebViewer-ClearLocations" decorator="call" initlabel="ClearLocations"
            kind="command" color="call">
  <description>
    <text>Clear stored location permissions.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-WebViewer-ClearLocations" decorator="call" initlabel="ClearLocations"
            kind="command" color="call">
  <description>
    <text>Clear stored location permissions.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="WebViewer-GoBack" decorator="call" initlabel="GoBack"
            kind="command" color="call">
  <description>
    <text>Go back to the previous page in the history list. Does nothing if there is no previous page.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-WebViewer-GoBack" decorator="call" initlabel="GoBack"
            kind="command" color="call">
  <description>
    <text>Go back to the previous page in the history list. Does nothing if there is no previous page.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="WebViewer-GoForward" decorator="call" initlabel="GoForward"
            kind="command" color="call">
  <description>
    <text>Go forward to the next page in the history list. Does nothing if there is no next page.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-WebViewer-GoForward" decorator="call" initlabel="GoForward"
            kind="command" color="call">
  <description>
    <text>Go forward to the next page in the history list. Does nothing if there is no next page.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="WebViewer-GoHome" decorator="call" initlabel="GoHome"
            kind="command" color="call">
  <description>
    <text>Loads the home URL page. This happens automatically when the home URL is changed.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-WebViewer-GoHome" decorator="call" initlabel="GoHome"
            kind="command" color="call">
  <description>
    <text>Loads the home URL page. This happens automatically when the home URL is changed.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="WebViewer-GoToUrl" decorator="call" initlabel="GoToUrl"
            kind="command" color="call">
  <description>
    <text>Load the page at the given URL.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="url" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="url/value"/>
    <LangSpecProperty key="socket-allow-2" value="url/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-WebViewer-GoToUrl" decorator="call" initlabel="GoToUrl"
            kind="command" color="call">
  <description>
    <text>Load the page at the given URL.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="url" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="url/value"/>
    <LangSpecProperty key="socket-allow-4" value="url/text"/>
  </LangSpecProperties>
</BlockGenus>


<!-- COMPONENTS END HERE -->
  </BlockGenuses>

  <!-- Block Families -->
  <BlockFamilies>

    <BlockFamily>
      <FamilyMember>number</FamilyMember>
      <FamilyMember>text</FamilyMember>
    </BlockFamily>

    <BlockFamily>
      <FamilyMember>true</FamilyMember>
      <FamilyMember>false</FamilyMember>
    </BlockFamily>

    <BlockFamily>
      <FamilyMember>number-min</FamilyMember>
      <FamilyMember>number-max</FamilyMember>
    </BlockFamily>

    <BlockFamily>
      <FamilyMember>number-sin</FamilyMember>
      <FamilyMember>number-cos</FamilyMember>
      <FamilyMember>number-tan</FamilyMember>
    </BlockFamily>

    <BlockFamily>
      <FamilyMember>number-asin</FamilyMember>
      <FamilyMember>number-acos</FamilyMember>
      <FamilyMember>number-atan</FamilyMember>
      <FamilyMember>number-radians-to-degrees</FamilyMember>
      <FamilyMember>number-degrees-to-radians</FamilyMember>
    </BlockFamily>

    <BlockFamily>
      <FamilyMember>number-quotient</FamilyMember>
      <FamilyMember>number-remainder</FamilyMember>
      <FamilyMember>number-modulo</FamilyMember>
    </BlockFamily>

    <BlockFamily>
      <FamilyMember>number-abs</FamilyMember>
      <FamilyMember>number-round</FamilyMember>
      <FamilyMember>number-floor</FamilyMember>
      <FamilyMember>number-ceiling</FamilyMember>
    </BlockFamily>

    <BlockFamily>
      <FamilyMember>number-exp</FamilyMember>
      <FamilyMember>number-log</FamilyMember>
    </BlockFamily>

    <BlockFamily>
      <FamilyMember>greaterthan</FamilyMember>
      <FamilyMember>greaterthanorequal</FamilyMember>
      <FamilyMember>lessthan</FamilyMember>
      <FamilyMember>lessthanorequal</FamilyMember>
      <FamilyMember>yail-equal</FamilyMember>
      <FamilyMember>yail-not-equal</FamilyMember>
    </BlockFamily>

    <BlockFamily>
      <FamilyMember>string-less-than</FamilyMember>
      <FamilyMember>string-equal</FamilyMember>
      <FamilyMember>string-greater-than</FamilyMember>
    </BlockFamily>

    <BlockFamily>
      <FamilyMember>string-upcase</FamilyMember>
      <FamilyMember>string-downcase</FamilyMember>
    </BlockFamily>

    <BlockFamily>
      <FamilyMember>number-plus</FamilyMember>
      <FamilyMember>number-minus</FamilyMember>
      <FamilyMember>number-times</FamilyMember>
      <FamilyMember>number-divide</FamilyMember>
    </BlockFamily>

    <BlockFamily>
      <FamilyMember>color-none</FamilyMember>
      <FamilyMember>color-black</FamilyMember>
      <FamilyMember>color-blue</FamilyMember>
      <FamilyMember>color-cyan</FamilyMember>
      <FamilyMember>color-dark-gray</FamilyMember>
      <FamilyMember>color-gray</FamilyMember>
      <FamilyMember>color-green</FamilyMember>
      <FamilyMember>color-light-gray</FamilyMember>
      <FamilyMember>color-magenta</FamilyMember>
      <FamilyMember>color-orange</FamilyMember>
      <FamilyMember>color-pink</FamilyMember>
      <FamilyMember>color-red</FamilyMember>
      <FamilyMember>color-white</FamilyMember>
      <FamilyMember>color-yellow</FamilyMember>
    </BlockFamily>

  </BlockFamilies>

  <!-- Drawers -->
  <!-- TODO(gleitz): uncomment and implement genusmembers if needed -->
  <BlockDrawerSets>
    <BlockDrawerSet name="Factory" type="stack" location="southwest" window-per-drawer="no" drawer-draggable="no">
      <BlockDrawer name="Definition" button-color="setter">
        <BlockGenusMember>define</BlockGenusMember>
        <BlockGenusMember>define-void</BlockGenusMember>
        <BlockGenusMember>def</BlockGenusMember>
        <BlockGenusMember>argument</BlockGenusMember>
        <BlockGenusMember>glue</BlockGenusMember>
      </BlockDrawer>

      <BlockDrawer name="Text" button-color="text">
        <BlockGenusMember>text</BlockGenusMember>
        <BlockGenusMember>string-append</BlockGenusMember>
        <BlockGenusMember>string-vappend</BlockGenusMember>
        <BlockGenusMember>string-length</BlockGenusMember>
        <BlockGenusMember>string-empty?</BlockGenusMember>
        <BlockGenusMember>string-less-than</BlockGenusMember>
        <BlockGenusMember>string-equal</BlockGenusMember>
        <BlockGenusMember>string-greater-than</BlockGenusMember>
        <BlockGenusMember>string-trim</BlockGenusMember>
        <BlockGenusMember>string-upcase</BlockGenusMember>
        <BlockGenusMember>string-downcase</BlockGenusMember>
        <BlockGenusMember>string-starts-at</BlockGenusMember>
        <BlockGenusMember>string-contains</BlockGenusMember>
        <BlockGenusMember>string-split-at-first</BlockGenusMember>
        <BlockGenusMember>string-split-at-first-of-any</BlockGenusMember>
        <BlockGenusMember>string-split</BlockGenusMember>
        <BlockGenusMember>string-split-at-any</BlockGenusMember>
        <BlockGenusMember>string-split-at-spaces</BlockGenusMember>
        <BlockGenusMember>string-subtext</BlockGenusMember>
        <BlockGenusMember>string-replace-all</BlockGenusMember>
       </BlockDrawer>

      <BlockDrawer name="Lists" button-color="list">
        <BlockGenusMember>make-list</BlockGenusMember>
        <BlockGenusMember>get-list-item</BlockGenusMember>
        <BlockGenusMember>replace-list-item</BlockGenusMember>
        <BlockGenusMember>remove-list-item</BlockGenusMember>
        <BlockGenusMember>insert-list-item</BlockGenusMember>
        <BlockGenusMember>list-length</BlockGenusMember>
        <!--
        These were removed and the implementation commented
        out in runtime.scm
        <BlockGenusMember>list-first</BlockGenusMember>
        <BlockGenusMember>list-rest</BlockGenusMember>
        -->
        <BlockGenusMember>append-list</BlockGenusMember>
        <BlockGenusMember>add-items-to-list</BlockGenusMember>
        <BlockGenusMember>list-member</BlockGenusMember>
        <BlockGenusMember>list-index</BlockGenusMember>
        <BlockGenusMember>list-pick-random</BlockGenusMember>
        <BlockGenusMember>list-empty?</BlockGenusMember>
        <BlockGenusMember>list-copy</BlockGenusMember>
        <BlockGenusMember>is-list?</BlockGenusMember>
        <BlockGenusMember>list-to-csv-row</BlockGenusMember>
        <BlockGenusMember>list-to-csv-table</BlockGenusMember>
        <BlockGenusMember>list-from-csv-row</BlockGenusMember>
        <BlockGenusMember>list-from-csv-table</BlockGenusMember>
        <BlockGenusMember>list-lookup-in-pairs</BlockGenusMember>

      </BlockDrawer>

      <BlockDrawer name="Math" button-color="math">
        <BlockGenusMember>number</BlockGenusMember>
        <BlockGenusMember>greaterthan</BlockGenusMember>
        <BlockGenusMember>greaterthanorequal</BlockGenusMember>
        <BlockGenusMember>lessthan</BlockGenusMember>
        <BlockGenusMember>lessthanorequal</BlockGenusMember>
        <BlockGenusMember>yail-equal</BlockGenusMember>
        <BlockGenusMember>yail-not-equal</BlockGenusMember>
        <BlockGenusMember>number-plus</BlockGenusMember>
        <BlockGenusMember>number-minus</BlockGenusMember>
        <BlockGenusMember>number-times</BlockGenusMember>
        <BlockGenusMember>number-divide</BlockGenusMember>
        <BlockGenusMember>number-sqrt</BlockGenusMember>
        <BlockGenusMember>number-random-fraction</BlockGenusMember>
        <BlockGenusMember>number-random-integer</BlockGenusMember>
        <BlockGenusMember>number-random-set-seed</BlockGenusMember>
        <BlockGenusMember>number-negate</BlockGenusMember>
        <BlockGenusMember>number-min</BlockGenusMember>
        <BlockGenusMember>number-max</BlockGenusMember>
        <BlockGenusMember>number-quotient</BlockGenusMember>
        <BlockGenusMember>number-remainder</BlockGenusMember>
        <BlockGenusMember>number-modulo</BlockGenusMember>
        <BlockGenusMember>number-abs</BlockGenusMember>
        <BlockGenusMember>number-round</BlockGenusMember>
        <BlockGenusMember>number-floor</BlockGenusMember>
        <BlockGenusMember>number-ceiling</BlockGenusMember>
        <BlockGenusMember>number-expt</BlockGenusMember>
        <BlockGenusMember>number-exp</BlockGenusMember>
        <BlockGenusMember>number-log</BlockGenusMember>
        <BlockGenusMember>number-sin</BlockGenusMember>
        <BlockGenusMember>number-cos</BlockGenusMember>
        <BlockGenusMember>number-tan</BlockGenusMember>
        <BlockGenusMember>number-asin</BlockGenusMember>
        <BlockGenusMember>number-acos</BlockGenusMember>
        <BlockGenusMember>number-atan</BlockGenusMember>
        <BlockGenusMember>number-atan2</BlockGenusMember>
        <BlockGenusMember>number-radians-to-degrees</BlockGenusMember>
        <BlockGenusMember>number-degrees-to-radians</BlockGenusMember>
        <BlockGenusMember>format-as-decimal</BlockGenusMember>
        <BlockGenusMember>number-is-number?</BlockGenusMember>
      </BlockDrawer>

      <BlockDrawer name="Logic" button-color="logic">
        <BlockGenusMember>true</BlockGenusMember>
        <BlockGenusMember>false</BlockGenusMember>
        <BlockGenusMember>logical-not</BlockGenusMember>
        <BlockGenusMember>yail-equal</BlockGenusMember>
        <BlockGenusMember>and</BlockGenusMember>
        <BlockGenusMember>or</BlockGenusMember>
      </BlockDrawer>

      <BlockDrawer name="Control" button-color="control">
        <BlockGenusMember>if</BlockGenusMember>
        <BlockGenusMember>ifelse</BlockGenusMember>
        <BlockGenusMember>choose</BlockGenusMember>
        <BlockGenusMember>foreach</BlockGenusMember>
        <BlockGenusMember>forrange</BlockGenusMember>
        <BlockGenusMember>while</BlockGenusMember>
        <BlockGenusMember>open-another-screen</BlockGenusMember>
        <BlockGenusMember>open-another-screen-with-start-value</BlockGenusMember>
        <BlockGenusMember>get-start-value</BlockGenusMember>
        <BlockGenusMember>close-screen</BlockGenusMember>
        <BlockGenusMember>close-screen-with-value</BlockGenusMember>
        <BlockGenusMember>close-application</BlockGenusMember>
        <BlockGenusMember>get-plain-start-text</BlockGenusMember>
        <BlockGenusMember>close-screen-with-plain-text</BlockGenusMember>
      </BlockDrawer>

      <BlockDrawer name="Colors" button-color="colors">
        <BlockGenusMember>make-color</BlockGenusMember>
        <BlockGenusMember>split-color</BlockGenusMember>
        <BlockGenusMember>color-none</BlockGenusMember>
        <BlockGenusMember>color-black</BlockGenusMember>
        <BlockGenusMember>color-blue</BlockGenusMember>
        <BlockGenusMember>color-cyan</BlockGenusMember>
        <BlockGenusMember>color-dark-gray</BlockGenusMember>
        <BlockGenusMember>color-gray</BlockGenusMember>
        <BlockGenusMember>color-green</BlockGenusMember>
        <BlockGenusMember>color-light-gray</BlockGenusMember>
        <BlockGenusMember>color-magenta</BlockGenusMember>
        <BlockGenusMember>color-orange</BlockGenusMember>
        <BlockGenusMember>color-pink</BlockGenusMember>
        <BlockGenusMember>color-red</BlockGenusMember>
        <BlockGenusMember>color-white</BlockGenusMember>
        <BlockGenusMember>color-yellow</BlockGenusMember>
      </BlockDrawer>

    </BlockDrawerSet>
  </BlockDrawerSets>

  <Pages drawer-with-page="yes">
    <!-- note that if the name "My Definitions" is changed, the comparator in
         appinventor/blockslib/src/openblocks/workspace/FactoryManager.java
         needs to be changed as well -->
    <Page page-name=" " page-width="800" page-drawer="My Definitions">
    </Page>
  </Pages>

</BlockLangDef>
